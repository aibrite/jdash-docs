{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nWelcome to Jdash documentation.\n\n\nJdash provides javascript + backend platform for adding end user designable dashboards into your web application.\n\n\nEnd users can personalize your application better with Jdash. Users can;\n\n\n\n\nCreate their own dashboards\n\n\nShare dashboards/dashlets\n\n\nConfigure dashlets\n\n\n\n\nFeatures\n\n\nClient side features\n\n\n\n\nFully customizable user interface\n\n\nEasy dashlet development\n\n\nBuiltin themes for Bootstrap \n Material\n\n\nCustom themes\n\n\n\n\nPlease see \nClient Developoment Section\n to get more information.\n\n\nServer side features\n\n\n\n\nEither use Jdash Cloud or install on your servers\n\n\nSupport for NodeJs and Net Core \n\n\nSupport for MongoDB, MySQL and Microsoft SQL Server\n\n\n\n\nPlease see \nBackend Developoment Section\n to get more information.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Welcome to Jdash documentation.  Jdash provides javascript + backend platform for adding end user designable dashboards into your web application.  End users can personalize your application better with Jdash. Users can;   Create their own dashboards  Share dashboards/dashlets  Configure dashlets", 
            "title": "Welcome"
        }, 
        {
            "location": "/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/#client-side-features", 
            "text": "Fully customizable user interface  Easy dashlet development  Builtin themes for Bootstrap   Material  Custom themes   Please see  Client Developoment Section  to get more information.", 
            "title": "Client side features"
        }, 
        {
            "location": "/#server-side-features", 
            "text": "Either use Jdash Cloud or install on your servers  Support for NodeJs and Net Core   Support for MongoDB, MySQL and Microsoft SQL Server   Please see  Backend Developoment Section  to get more information.", 
            "title": "Server side features"
        }, 
        {
            "location": "/client/", 
            "text": "Client Development\n\n\nGetting Started\n\n\nTo start using Jdash in 5 minutes see \nGetting Started\n.\n\n\nBasic Concepts\n\n\nTo get more information about Jdash architecture and license models see \nBasic Concepts\n.\n\n\nProviders\n\n\nTo get more information about client providers see \nProviders\n.\n\n\nDashboards\n\n\nTo get more information about using dashboards see \nDashboards\n.\n\n\nDashlet Development\n\n\nTo get more information about developing dashlets see \nDashlet Development\n.", 
            "title": "Client Home"
        }, 
        {
            "location": "/client/#client-development", 
            "text": "", 
            "title": "Client Development"
        }, 
        {
            "location": "/client/#getting-started", 
            "text": "To start using Jdash in 5 minutes see  Getting Started .", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/#basic-concepts", 
            "text": "To get more information about Jdash architecture and license models see  Basic Concepts .", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/#providers", 
            "text": "To get more information about client providers see  Providers .", 
            "title": "Providers"
        }, 
        {
            "location": "/client/#dashboards", 
            "text": "To get more information about using dashboards see  Dashboards .", 
            "title": "Dashboards"
        }, 
        {
            "location": "/client/#dashlet-development", 
            "text": "To get more information about developing dashlets see  Dashlet Development .", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/getting-started/", 
            "text": "Getting Started\n\n\nQuick Start\n\n\nThe aim of this article is to get you up and running with Jdash in 5 minutes.\n\n\nStep 1: Install JDash Client\n\n\nUse npm to install Jdash client library.\n\n\nnpm install jdash-ui --save\n\n\n\n\nThis will create node_modules/jdash-ui folder.\n\n\nNote: If this is the first time you use npm to add a package first execute npm init to create a package.json.\n\n\nStep 2: Create a basic HTML page\n\n\nCreate index.html and paste below code inside.\n\n\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta name=\nviewport\n content=\ninitial-scale=1, maximum-scale=1, user-scalable=no\n /\n\n    \ntitle\nJDash Tutorial\n/title\n\n\n    \n!-- jdash client library --\n\n    \nscript src=\nnode_modules/jdash-ui/dist/jdash.min.js\n/script\n\n\n    \n!-- jdash theme \n elements --\n\n    \nlink rel=\nimport\n href=\nnode_modules/jdash-ui/dist/components/jdash.html\n\n\n/head\n\n\n\nbody class=\nj-light-gray j-padding\n\n\n\n/body\n\n\n\n/html\n\n\n\n\n\nStep 3: Develop your first dashlet\n\n\nYou use \nj-dashlet\n element to define a dashlet. \n\n\nContent of \nj-dashlet\n can include \ntemplate\n element which can be used to define dom (innerHTML) of your dashlet. An optional \nscript\n element inside \nj-dashlet\n can be used to execute javascript for this dashlet. That simple \n clear!\n\n\nCopy the following code inside body tag. \n\n\n!-- Define \nhello-world\n dashlet --\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nStep 4: Get a free api key\n\n\nJDash cloud can save and retrieve user data i.e. dashboards, layouts, dashlet configurations and positions.\n\n\nTo use Jdash Cloud \nregister as a new user\n. After registration you will get an api key and test user token. Use them to initialize authentication.\n\n\nTodo so, add a \nscript\n element just before \n/body\n tag.\n\n\n    \nscript\n\n        jdash.ready(function () {\n            jdash.Provider.init({\n                apiKey: 'YOUR API KEY',\n                userToken: 'USER TOKEN'\n            })\n        })\n    \n/script\n\n\n/body\n\n\n\n\n\napikey\n:  A string value which identifies your application.\n\n\nuserToken\n:  A string value or function to authenticate your end user to Jdash cloud.\n\n\nStep 5: Create and display dashboard\n\n\nYou use \nj-dashboard\n element to display a dashboard. \n\n\nInside \nbody\n tag, before \nscript\n element add following code.\n\n\nbutton id=\ncreateDashboardBtn\nCreate Dashboard\n/button\n\n\nbutton id=\naddDashletBtn\nAdd Dashlet\n/button\n\n\ndiv id=\ndashboardList\n/div\n\n\n\nj-dashboard id=\ndashboard\n j-view-mode=\ndashletedit\n\n    \nh2 j-bind=\ntitle\n/h2\n\n\n/j-dashboard\n\n\n\n\n\nWe also added some buttons to create dashboard and adding dashlets.\n\n\nNow and event handlers inside \njdash.ready\n handler.\n\n\nscript\n\n    jdash.ready(function () {\n\n        jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: 'USER TOKEN'\n        })\n\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    })\n\n/script\n\n\n/body\n\n\n\n\n\nStep 6: View dashboards\n\n\nAs last step we will implement creating buttons to view existing dashboards.\n\n\njdash.Provider.getMyDashboards\n method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for \nuserToken\n param for \njdash.Provider.init\n method.\n\n\nAdd following function inside \nscript\n element.\n\n\nfunction createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i \n result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}\n\n\n\n\nCall this function when page loads or user creates a new dashboard.\n\n\nStep 7: Download source code\n\n\nSource code of this guide can be found at this \nGitHub Repo\n.\n\n\nIf you enjoy Jdash you can continue from Basic Concepts.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/getting-started/#quick-start", 
            "text": "The aim of this article is to get you up and running with Jdash in 5 minutes.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/client/getting-started/#step-1-install-jdash-client", 
            "text": "Use npm to install Jdash client library.  npm install jdash-ui --save  This will create node_modules/jdash-ui folder.  Note: If this is the first time you use npm to add a package first execute npm init to create a package.json.", 
            "title": "Step 1: Install JDash Client"
        }, 
        {
            "location": "/client/getting-started/#step-2-create-a-basic-html-page", 
            "text": "Create index.html and paste below code inside.  !DOCTYPE html  html lang= en  head \n     meta charset= utf-8 \n     meta name= viewport  content= initial-scale=1, maximum-scale=1, user-scalable=no  / \n     title JDash Tutorial /title \n\n     !-- jdash client library -- \n     script src= node_modules/jdash-ui/dist/jdash.min.js /script \n\n     !-- jdash theme   elements -- \n     link rel= import  href= node_modules/jdash-ui/dist/components/jdash.html  /head  body class= j-light-gray j-padding  /body  /html", 
            "title": "Step 2: Create a basic HTML page"
        }, 
        {
            "location": "/client/getting-started/#step-3-develop-your-first-dashlet", 
            "text": "You use  j-dashlet  element to define a dashlet.   Content of  j-dashlet  can include  template  element which can be used to define dom (innerHTML) of your dashlet. An optional  script  element inside  j-dashlet  can be used to execute javascript for this dashlet. That simple   clear!  Copy the following code inside body tag.   !-- Define  hello-world  dashlet --  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n     /script  /j-dashlet", 
            "title": "Step 3: Develop your first dashlet"
        }, 
        {
            "location": "/client/getting-started/#step-4-get-a-free-api-key", 
            "text": "JDash cloud can save and retrieve user data i.e. dashboards, layouts, dashlet configurations and positions.  To use Jdash Cloud  register as a new user . After registration you will get an api key and test user token. Use them to initialize authentication.  Todo so, add a  script  element just before  /body  tag.       script \n        jdash.ready(function () {\n            jdash.Provider.init({\n                apiKey: 'YOUR API KEY',\n                userToken: 'USER TOKEN'\n            })\n        })\n     /script  /body   apikey\n:  A string value which identifies your application.  userToken\n:  A string value or function to authenticate your end user to Jdash cloud.", 
            "title": "Step 4: Get a free api key"
        }, 
        {
            "location": "/client/getting-started/#step-5-create-and-display-dashboard", 
            "text": "You use  j-dashboard  element to display a dashboard.   Inside  body  tag, before  script  element add following code.  button id= createDashboardBtn Create Dashboard /button  button id= addDashletBtn Add Dashlet /button  div id= dashboardList /div  j-dashboard id= dashboard  j-view-mode= dashletedit \n     h2 j-bind= title /h2  /j-dashboard   We also added some buttons to create dashboard and adding dashlets.  Now and event handlers inside  jdash.ready  handler.  script \n    jdash.ready(function () {\n\n        jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: 'USER TOKEN'\n        })\n\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    }) /script  /body", 
            "title": "Step 5: Create and display dashboard"
        }, 
        {
            "location": "/client/getting-started/#step-6-view-dashboards", 
            "text": "As last step we will implement creating buttons to view existing dashboards.  jdash.Provider.getMyDashboards  method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for  userToken  param for  jdash.Provider.init  method.  Add following function inside  script  element.  function createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i   result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}  Call this function when page loads or user creates a new dashboard.", 
            "title": "Step 6: View dashboards"
        }, 
        {
            "location": "/client/getting-started/#step-7-download-source-code", 
            "text": "Source code of this guide can be found at this  GitHub Repo .  If you enjoy Jdash you can continue from Basic Concepts.", 
            "title": "Step 7: Download source code"
        }, 
        {
            "location": "/client/basic-concepts/", 
            "text": "Basic Concepts\n\n\nUsing Jdash you can add drag-drop end user designable dashboards to your application.\n\n\nFeatures\n\n\nLicense Models\n\n\nThere are two license models.\n\n\nJDash Cloud\n\nYou can use \nJDash Cloud\n to store dashboard \n dashlet related data. \n\n\nIf you have a cloud based application and don't want to integrate Jdash backend platform into your server application this is an ideal, cheap and fast solution to get you up.\n\n\nOn Premise\n\nIf you are a developer/company which develop applications for other customers or if you have a product which you want to embed Jdash this is the right license type for you.\n\n\nYou can integrate Jdash backend platform into your server application easily.\n\n\n\n\nIf you are using NodeJs, we support it with MongoDB and MySQL.\n\n\nIf you are using Asp.Net MVC 5+, we support it with MySQL and MSSQL.\n\n\nIf you are using Net Core, we support it with MySQL and MSSQL.\n\n\n\n\nIf you need other platforms/database servers just drop us an e-mail (hello@jdash.io).\n\n\nCustom elements\n\n\nJdash uses W3C custom elements spec for dashlet development. \n\n\nOn top of this spec we developed a component framework to make dashlet development easier.\n\n\nHere is a sample dashlet.\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \n!-- Think template as user interface layer of your dashlet --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n\n        // An optional javascript function allows you implement\n        // your business logic.\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nAbove code snippet defines \nhello-world\n custom element which inherits from \njdash.Dashlet\n class.\n\n\nYou can also use this element directly inside your HTML.\n\n\nhello-world\n/hello-world\n\n\n\n\n\nKey elements\n\n\nBelow table shows key elements and descriptions.\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nj-dashboard\n\n\nDisplays dashboard\n\n\n\n\n\n\nj-dashlet\n\n\nDefines a new dashlet element\n\n\n\n\n\n\nj-grid-layout\n\n\nMulti column/row layout\n\n\n\n\n\n\n\n\nDashboard element contains one layout element and many dashlets inside that layout element. Layout is responsible for managing drag-drop, resizing and saving/loading dashlet positions.\n\n\nIt is also possible to develop new layout elements by inheriting \njdash.DashboardLayout\n class. Currently Jdash framework contains one layout element: \nj-grid-layout\n. In future", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/basic-concepts/#basic-concepts", 
            "text": "Using Jdash you can add drag-drop end user designable dashboards to your application.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/basic-concepts/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/client/basic-concepts/#license-models", 
            "text": "There are two license models.  JDash Cloud \nYou can use  JDash Cloud  to store dashboard   dashlet related data.   If you have a cloud based application and don't want to integrate Jdash backend platform into your server application this is an ideal, cheap and fast solution to get you up.  On Premise \nIf you are a developer/company which develop applications for other customers or if you have a product which you want to embed Jdash this is the right license type for you.  You can integrate Jdash backend platform into your server application easily.   If you are using NodeJs, we support it with MongoDB and MySQL.  If you are using Asp.Net MVC 5+, we support it with MySQL and MSSQL.  If you are using Net Core, we support it with MySQL and MSSQL.   If you need other platforms/database servers just drop us an e-mail (hello@jdash.io).", 
            "title": "License Models"
        }, 
        {
            "location": "/client/basic-concepts/#custom-elements", 
            "text": "Jdash uses W3C custom elements spec for dashlet development.   On top of this spec we developed a component framework to make dashlet development easier.  Here is a sample dashlet.  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         !-- Think template as user interface layer of your dashlet -- \n         h1 /h1 \n     /template \n     script \n\n        // An optional javascript function allows you implement\n        // your business logic.\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n        })\n     /script  /j-dashlet   Above code snippet defines  hello-world  custom element which inherits from  jdash.Dashlet  class.  You can also use this element directly inside your HTML.  hello-world /hello-world", 
            "title": "Custom elements"
        }, 
        {
            "location": "/client/basic-concepts/#key-elements", 
            "text": "Below table shows key elements and descriptions.     Element  Description      j-dashboard  Displays dashboard    j-dashlet  Defines a new dashlet element    j-grid-layout  Multi column/row layout     Dashboard element contains one layout element and many dashlets inside that layout element. Layout is responsible for managing drag-drop, resizing and saving/loading dashlet positions.  It is also possible to develop new layout elements by inheriting  jdash.DashboardLayout  class. Currently Jdash framework contains one layout element:  j-grid-layout . In future", 
            "title": "Key elements"
        }, 
        {
            "location": "/client/working-with-providers/", 
            "text": "Working with Provider\n\n\nProvider basics\n\n\nJdash uses \njdash.Provider\n methods to create, save and delete dashboards and dashlets.\n\n\nProvider should be initialized before using any methods of the below methods. \n\n\n\u0130nitializing provider\n\n\nIf you are using Jdash Cloud initializing means setting a valid api key and user token.\n\n\nAfter \nregistering as a new user\n you will get an api key and test user token. Use them to initialize provider.\n\n\njdash.ready(function () {\n    jdash.Provider.init({\n        apiKey: 'YOUR API KEY',\n        userToken: 'USER TOKEN'\n    })\n})\n\n\n\n\nUser based design\n\n\nIn Jdash, a dashboard belongs to a user. A user may have many dashboards and a dashboard contains dashlets.\n\n\nThis allows your users to create and design their own dashboards.\n\n\nWhen you initialize provider, \napiKey\n represents your application in Jdash cloud. \nuserToken\n allows you to set a security token for current user. Methods like \ncreateDashboard\n uses this token to assign dashboard to current user. \n\n\nMethods and samples\n\n\nUse \ngetDashboard\n method to get dashboard model with dashboard id.\n\n\njdash.Provider.getDashboard('58b72f14421b57354bf58cc5').then(function(model) { \n        console.log(model)\n    }).catch(function(err) { \n        console.log(err)\n    })\n\n\n\n\nAll provider methods return promises. \n\n\nUse \ncreateDashboard\n method to create a dashboard.\n\n\njdash.Provider.createDashboard({\n    title: 'My dashboard'\n}).then(function (result) {\n    console.log('Dashboard created with id:' + result.id);\n    dashboard.load(result.id);\n}).catch(function (err) {\n    alert('There was an error creating dashboard: ' + err.message || err)\n})\n\n\n\n\nNote that the user which creates the dashboard is auto\u0131matically retreived from the user token.\n\n\nUse \ngetMyDashboards\n method to get a list of dashboards which belongs to current user.\n\n\nUse \nsearchDashboards\nmethod to search for dashboards.\n\n\nUse \ndeleteDashboard\n method to delete a dashboard. When a dashboard is deleted all dashlets inside that dashboard are automatically deleted.\n\n\nUse \nsaveDashboard\n to update a dashboard.\n\n\nProvider also has CRUD methods for dashlets. Although you can use these methods directly it's better to use methods of \nj-dashboard\n element to create, remove or save dashlets.\n\n\nBelow table is a summary of methods for dashlets.\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreateDashlet\n\n\nCreates dashlet\n\n\n\n\n\n\nsaveDashlet\n\n\nUpdates a dashlet\n\n\n\n\n\n\ndeleteDashlet\n\n\nDeletes a dashlet\n\n\n\n\n\n\n\n\nKey interfaces\n\n\njdash.Provider\n implements \nIClientProvider\ninterface.\n\n\ninterface IClientProvider {\n    getDashboard(id: string): Promise\nGetDashboardResult\n;\n    createDashboard(model: DashboardCreateModel): Promise\nCreateResult\n;\n    getMyDashboards(query?: Query): Promise\nQueryResult\nDashboardModel\n;\n    searchDashboards(search?: ISearchDashboards, query?: Query): Promise\nQueryResult\nDashboardModel\n;\n    deleteDashboard(id: string): Promise\nany\n;\n    saveDashboard(id: string, updateValues: DashboardUpdateModel): Promise\nany\n;\n    createDashlet(model: DashletCreateModel): Promise\nCreateResult\n;\n    deleteDashlet(id: string): Promise\nany\n;\n    saveDashlet(id: string, updateValues: DashletUpdateModel): Promise\nany\n;\n}\n\n\n\n\nSee below definitions for dashboard, dashlet and common data types.\n\n\n\ninterface DashboardModel {\n    id: string;\n    title: string;\n    appid: string;\n    user: string;\n    config: {\n        [key: string]: any;\n    };\n    description: string;\n    layout: LayoutModel;\n    createdAt: Date;\n    shareWith?: string;\n}\n\ninterface DashletModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n    createdAt: Date;\n}\n\ninterface ISearchDashboards {\n    user: string | Array\nstring\n;\n    shareWith?: string | Array\nstring\n;\n}\n\ninterface Query {\n    limit: number;\n    startFrom?: any;\n}\n\ninterface SearchQuery extends Query {\n    filters: any;\n}\n\ninterface QueryResult\nT\n {\n    data: Array\nT\n;\n    hasMore: boolean;\n}\n\ninterface CreateResult {\n    id: string;\n}\n\ninterface GetDashboardResult {\n    dashboard: DashboardModel;\n    dashlets: Array\nDashletModel\n;\n}\n\ninterface DashboardCreateModel {\n    id?: string;\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n    user?: string;\n}\n\ninterface DashboardUpdateModel {\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout?: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n}\n\n\n\ninterface DashletPositionModel {\n    zone?: string;\n    y?: number;\n    x?: number;\n    z?: number;\n}\n\ninterface DashletCreateModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface DashletUpdateModel {\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface LayoutDashletMetaModel {\n    data?: any;\n    position?: DashletPositionModel;\n}\n\ninterface LayoutModel {\n    moduleId: string;\n    config?: {\n        [key: string]: any;\n    };\n    dashlets?: {\n        [key: string]: LayoutDashletMetaModel;\n    };\n}", 
            "title": "Providers"
        }, 
        {
            "location": "/client/working-with-providers/#working-with-provider", 
            "text": "", 
            "title": "Working with Provider"
        }, 
        {
            "location": "/client/working-with-providers/#provider-basics", 
            "text": "Jdash uses  jdash.Provider  methods to create, save and delete dashboards and dashlets.  Provider should be initialized before using any methods of the below methods.", 
            "title": "Provider basics"
        }, 
        {
            "location": "/client/working-with-providers/#initializing-provider", 
            "text": "If you are using Jdash Cloud initializing means setting a valid api key and user token.  After  registering as a new user  you will get an api key and test user token. Use them to initialize provider.  jdash.ready(function () {\n    jdash.Provider.init({\n        apiKey: 'YOUR API KEY',\n        userToken: 'USER TOKEN'\n    })\n})", 
            "title": "\u0130nitializing provider"
        }, 
        {
            "location": "/client/working-with-providers/#user-based-design", 
            "text": "In Jdash, a dashboard belongs to a user. A user may have many dashboards and a dashboard contains dashlets.  This allows your users to create and design their own dashboards.  When you initialize provider,  apiKey  represents your application in Jdash cloud.  userToken  allows you to set a security token for current user. Methods like  createDashboard  uses this token to assign dashboard to current user.", 
            "title": "User based design"
        }, 
        {
            "location": "/client/working-with-providers/#methods-and-samples", 
            "text": "Use  getDashboard  method to get dashboard model with dashboard id.  jdash.Provider.getDashboard('58b72f14421b57354bf58cc5').then(function(model) { \n        console.log(model)\n    }).catch(function(err) { \n        console.log(err)\n    })  All provider methods return promises.   Use  createDashboard  method to create a dashboard.  jdash.Provider.createDashboard({\n    title: 'My dashboard'\n}).then(function (result) {\n    console.log('Dashboard created with id:' + result.id);\n    dashboard.load(result.id);\n}).catch(function (err) {\n    alert('There was an error creating dashboard: ' + err.message || err)\n})  Note that the user which creates the dashboard is auto\u0131matically retreived from the user token.  Use  getMyDashboards  method to get a list of dashboards which belongs to current user.  Use  searchDashboards method to search for dashboards.  Use  deleteDashboard  method to delete a dashboard. When a dashboard is deleted all dashlets inside that dashboard are automatically deleted.  Use  saveDashboard  to update a dashboard.  Provider also has CRUD methods for dashlets. Although you can use these methods directly it's better to use methods of  j-dashboard  element to create, remove or save dashlets.  Below table is a summary of methods for dashlets.     Method  Description      createDashlet  Creates dashlet    saveDashlet  Updates a dashlet    deleteDashlet  Deletes a dashlet", 
            "title": "Methods and samples"
        }, 
        {
            "location": "/client/working-with-providers/#key-interfaces", 
            "text": "jdash.Provider  implements  IClientProvider interface.  interface IClientProvider {\n    getDashboard(id: string): Promise GetDashboardResult ;\n    createDashboard(model: DashboardCreateModel): Promise CreateResult ;\n    getMyDashboards(query?: Query): Promise QueryResult DashboardModel ;\n    searchDashboards(search?: ISearchDashboards, query?: Query): Promise QueryResult DashboardModel ;\n    deleteDashboard(id: string): Promise any ;\n    saveDashboard(id: string, updateValues: DashboardUpdateModel): Promise any ;\n    createDashlet(model: DashletCreateModel): Promise CreateResult ;\n    deleteDashlet(id: string): Promise any ;\n    saveDashlet(id: string, updateValues: DashletUpdateModel): Promise any ;\n}  See below definitions for dashboard, dashlet and common data types.  \ninterface DashboardModel {\n    id: string;\n    title: string;\n    appid: string;\n    user: string;\n    config: {\n        [key: string]: any;\n    };\n    description: string;\n    layout: LayoutModel;\n    createdAt: Date;\n    shareWith?: string;\n}\n\ninterface DashletModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n    createdAt: Date;\n}\n\ninterface ISearchDashboards {\n    user: string | Array string ;\n    shareWith?: string | Array string ;\n}\n\ninterface Query {\n    limit: number;\n    startFrom?: any;\n}\n\ninterface SearchQuery extends Query {\n    filters: any;\n}\n\ninterface QueryResult T  {\n    data: Array T ;\n    hasMore: boolean;\n}\n\ninterface CreateResult {\n    id: string;\n}\n\ninterface GetDashboardResult {\n    dashboard: DashboardModel;\n    dashlets: Array DashletModel ;\n}\n\ninterface DashboardCreateModel {\n    id?: string;\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n    user?: string;\n}\n\ninterface DashboardUpdateModel {\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout?: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n}\n\n\n\ninterface DashletPositionModel {\n    zone?: string;\n    y?: number;\n    x?: number;\n    z?: number;\n}\n\ninterface DashletCreateModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface DashletUpdateModel {\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface LayoutDashletMetaModel {\n    data?: any;\n    position?: DashletPositionModel;\n}\n\ninterface LayoutModel {\n    moduleId: string;\n    config?: {\n        [key: string]: any;\n    };\n    dashlets?: {\n        [key: string]: LayoutDashletMetaModel;\n    };\n}", 
            "title": "Key interfaces"
        }, 
        {
            "location": "/client/working-with-dashboards/", 
            "text": "Working with Dashboards\n\n\nj-dashboard element\n\n\nUse \nj-dashboard\nelement to display an existing dashboard.\n\n\nj-dashboard id=\ndashboard\n\n    \nh2 j-bind=\ntitle\n/h2\n\n\n/j-dashboard\n\n\n\n\n\nViewing dashboard\n\n\nUse \nload\n method to load (display) a dashboard.\n\n\nload(id: string | DashboardModel): Promise\nDashboardModel\n;\n\n\n\n\nload\nmethod returns a promise and you can use dashboard id or \nDashboardModel\n.\n\n\nAs a common scenario you can use jdash.Provider.getMyDashboards method to get a list of dashboard for current user. After a click for a dashboard use \nload\nmethod to display selected dashboard.\n\n\nRefer to Getting Started for sample usage of \nload\nmethod.\n\n\nAbout View modes\n\n\nA dashboard may have one of the following view modes.\n\n\n\n\n\n\n\n\nView mode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreadonly\n\n\nDisplays dashboard in readonly mode. Best for viewing dashboard\n\n\n\n\n\n\ndashletedit\n\n\nUser can edit dashlet properties and positions. Best for creating and configuring dashlets\n\n\n\n\n\n\nlayoutedit\n\n\nUser can edit layout of dashboard. Best for desiging structure of dashboard.\n\n\n\n\n\n\n\n\nSet initialize dashboard view mode use \nj-view-mode\n attribute of \nj-dashboard\n element. \n\n\nj-dashboard id=\ndashboard\n j-view-mode=\ndashletedit\n\n\n\n/j-dashboard\n\n\n\n\n\nYou can also use HTMLElement.setAttribute method to change it later.\n\n\nvar dashboard = document.querySelector('#dashboard');\ndashboard.setAttribute('j-view-mode', 'readonly');\n\n\n\n\nAdding dashlets\n\n\nGetting a list of available dashlets\n\n\nUse jdash.DashletModule.getModules method to get a list of available dashlet elements. Refer to Dashlet Development (next section) for more information about defining dashlets.\n\n\nYou can use \ntitle\nattribute to display a dashlet to user. \nid\n attribute can be used to create an instance.\n\n\nvar dashletElements = jdash.DashletModule.getModules();\nfor(var i = 0; i \n dashletElements.length;i++) \n    console.log(dashletElements[i].title, ',', dashletElements[i].id)\n\n\n\n\nAn example output can be\n\n\nHello World, hello-world\nAstronomy of Day, nasa-apod-dashlet\nRss Dashlet, rss-dashlet\nChart Dashlet, chart-dashlet\nPure HTML, content-dashlet\nRich Content, rich-content\n\n\n\n\nAdding dashlet to dashboard\n\n\nUse \naddDashlet\n method of \nj-dashboard\nelement to create a new dashlet.\n\n\ndashboard.addDashlet('hello-world');\n\n\n\n\nYou can also create a dashlet instance and use that instance instead of using element tag.\n\n\nvar mydashlet = document.createElement('hello-word');\nmydashlet.title = 'Say Hi to me!';\ndashboard.addDashlet(mydashlet);\n\n\n\n\nj-dashboard\nelement automatically calls \ncreateDashlet\nmethod of provider so new dashlet is persisted and will be available when dashboard loads at later.\n\n\nDrag-drop adding\n\n\nAs an alternative you can use makeDroppable method of layout. This lets yo to create an HTML element for a dashlet and users can add this dashlet just by dropping to the dashboard element.\n\n\nRefer to sample applications to see how to use \nmakeDroppable\n method.", 
            "title": "Working with Dashboards"
        }, 
        {
            "location": "/client/working-with-dashboards/#working-with-dashboards", 
            "text": "", 
            "title": "Working with Dashboards"
        }, 
        {
            "location": "/client/working-with-dashboards/#j-dashboard-element", 
            "text": "Use  j-dashboard element to display an existing dashboard.  j-dashboard id= dashboard \n     h2 j-bind= title /h2  /j-dashboard", 
            "title": "j-dashboard element"
        }, 
        {
            "location": "/client/working-with-dashboards/#viewing-dashboard", 
            "text": "Use  load  method to load (display) a dashboard.  load(id: string | DashboardModel): Promise DashboardModel ;  load method returns a promise and you can use dashboard id or  DashboardModel .  As a common scenario you can use jdash.Provider.getMyDashboards method to get a list of dashboard for current user. After a click for a dashboard use  load method to display selected dashboard.  Refer to Getting Started for sample usage of  load method.", 
            "title": "Viewing dashboard"
        }, 
        {
            "location": "/client/working-with-dashboards/#about-view-modes", 
            "text": "A dashboard may have one of the following view modes.     View mode  Description      readonly  Displays dashboard in readonly mode. Best for viewing dashboard    dashletedit  User can edit dashlet properties and positions. Best for creating and configuring dashlets    layoutedit  User can edit layout of dashboard. Best for desiging structure of dashboard.     Set initialize dashboard view mode use  j-view-mode  attribute of  j-dashboard  element.   j-dashboard id= dashboard  j-view-mode= dashletedit  /j-dashboard   You can also use HTMLElement.setAttribute method to change it later.  var dashboard = document.querySelector('#dashboard');\ndashboard.setAttribute('j-view-mode', 'readonly');", 
            "title": "About View modes"
        }, 
        {
            "location": "/client/working-with-dashboards/#adding-dashlets", 
            "text": "", 
            "title": "Adding dashlets"
        }, 
        {
            "location": "/client/working-with-dashboards/#getting-a-list-of-available-dashlets", 
            "text": "Use jdash.DashletModule.getModules method to get a list of available dashlet elements. Refer to Dashlet Development (next section) for more information about defining dashlets.  You can use  title attribute to display a dashlet to user.  id  attribute can be used to create an instance.  var dashletElements = jdash.DashletModule.getModules();\nfor(var i = 0; i   dashletElements.length;i++) \n    console.log(dashletElements[i].title, ',', dashletElements[i].id)  An example output can be  Hello World, hello-world\nAstronomy of Day, nasa-apod-dashlet\nRss Dashlet, rss-dashlet\nChart Dashlet, chart-dashlet\nPure HTML, content-dashlet\nRich Content, rich-content", 
            "title": "Getting a list of available dashlets"
        }, 
        {
            "location": "/client/working-with-dashboards/#adding-dashlet-to-dashboard", 
            "text": "Use  addDashlet  method of  j-dashboard element to create a new dashlet.  dashboard.addDashlet('hello-world');  You can also create a dashlet instance and use that instance instead of using element tag.  var mydashlet = document.createElement('hello-word');\nmydashlet.title = 'Say Hi to me!';\ndashboard.addDashlet(mydashlet);  j-dashboard element automatically calls  createDashlet method of provider so new dashlet is persisted and will be available when dashboard loads at later.", 
            "title": "Adding dashlet to dashboard"
        }, 
        {
            "location": "/client/working-with-dashboards/#drag-drop-adding", 
            "text": "As an alternative you can use makeDroppable method of layout. This lets yo to create an HTML element for a dashlet and users can add this dashlet just by dropping to the dashboard element.  Refer to sample applications to see how to use  makeDroppable  method.", 
            "title": "Drag-drop adding"
        }, 
        {
            "location": "/client/dashlet-development/", 
            "text": "Dashlet Development\n\n\nAbout dashlets\n\n\nIn Jdash, \nDashlet\n means a custom element which consists of Html dom elements and optional business layer.\n\n\nJdash includes component based custom element development framework. This framework allows you to develop and register custom elements easily.\n\n\nDefining dashlets\n\n\n!-- Define \nhello-world\n element --\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\ntemplate\nelement is used to set html dom elements. When a new instance of dashlet is created, elements inside template element is cloned and dom of new dashlet instance is created.\n\n\nscript\n element is optional and allows you to execute javascript for dashlet. \n\n\nAfter defining a dashlet you can add it to a dashboard or just use as custom element.\n\n\nhello-world\n/hello-word\n\n\n\n\n\nor add to a dashboard.\n\n\ndashboard.addDashlet('hello-world');\n\n\n\n\nJdash also supports placing dashlet definition inside another file.\n\n\nlink rel=\nimport\n href=\ndashlets/helloworld.html\n\n\n\n\n\nIt is also possible to seperate dashlet dom and script. Below is an example.\n\n\n!-- put a template element with an id value same as id of your dashlet --\n\n\ntemplate id=\nhello-world\n\n    \nh1\n/h1\n\n\n/template\n\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n\n/j-dashlet\n\n\n\nscript\n\n\n// Define hello-world dashlet\njdash.define('hello-world', function () {\n\n    this.initialized = function () {\n        // Dom is ready!\n        var h1 = this.querySelector('h1')\n        h1.textContent = 'Hello World!';\n    }\n\n})\n\n/script\n\n\n\n\n\nDashlet lifecycle\n\n\nSince Jdash uses custom elements as dashlets same rules for custom elements apply for dashlets.\n\n\nBelow code summarizes dashlet lifecycle.\n\n\njdash.define('hello-world', function () {\n\n    // a new instance is created.\n\n    this.initialized = function () {\n        // Dom is ready!\n    }\n\n    this.connected = function() {\n        // Attached to document\n    }\n\n    this.disconnected = function() {\n        // Detached from document\n    }\n\n})\n\n\n\n\nSee \nW3C Custom Elements\n document to get more information about custom elements.\n\n\nNote: For backward compability we used ES5 style dashlet definition in this document. Jdash also supports ES6 and you can use \nclass\n keyword and inherit from \nDashlet\n to define your dashlet.\n\n\nConfigurable dashlets\n\n\nDefining editor element\n\n\nUse \nj-dashlet-editor\n element to define a dashlet editor. Same rules (templates, script, lifecycle etc.) are valid for dashlet editors since they are developed by Jdash component framework.\n\n\nj-dashlet-editor id=\nhello-world-editor\n\n\n    \ntemplate\n\n        Editor content goes here\n    \n/template\n\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n\n        })\n    \n/script\n\n\n\n/j-dashlet-editor\n\n\n\n\n\nWhen a new dashlet is defined, Jdash looks for an element tag with postfixed by \n-editor\n. For example if your dashlet is defined by \nhello-world\n Jdash looks for \nhello-world-editor\n. If it finds it associates this tag as editor for your dashlet.\n\n\nYou can override this behaviour by explicitly setting a value to \nj-editor\n attribute.\n\n\nj-dashlet id=\nhello-world\n j-editor=\nmy-editor\n title=\nHello world!\n/j-dashlet\n\n\nj-dashlet-editor id=\nmy-editor\n/j-dashlet-editor\n\n\n\n\n\nLoading configuration\n\n\nYou can set and retrieve configuration values for dashlets. Configuration values are automatically converted to Json and stored on Jdash Cloud or on your backend.\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.loadConfig = function () {\n                var h1 = this.querySelector('h1')\n                h1.textContent = this.config.get('header') || 'Hello World!';\n            }\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nIf you attach a function named \nloadConfig\n to your dashlet Jdash automatically calls it when a new instance of your dashlet is created or after successfully saving new configuration values.\n\n\nj-dashlet-editor id=\nhello-world-editor\n\n\n    \ntemplate\n\n        \nh3\nSet a header value:\n/h3\n\n        \ninput type=\ntext\n\n    \n/template\n\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                var inputEl = this.querySelector('input');\n                inputEl.value = this.dashlet.config.get('header') || '';\n            }\n\n            this.addEventListener('setconfig', function (event) {\n                var inputEl = this.querySelector('input'), value = inputEl.value;\n                if (!value) {\n                    alert('Set a valid value please!');\n                    event.preventDefault();\n                } else this.dashlet.config.set('header', value)\n            })\n\n        })\n    \n/script\n\n\n\n/j-dashlet-editor\n\n\n\n\n\nAdd an event listener for \nsetconfig\n event so that you can set new values for configuration.", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/dashlet-development/#dashlet-development", 
            "text": "", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/dashlet-development/#about-dashlets", 
            "text": "In Jdash,  Dashlet  means a custom element which consists of Html dom elements and optional business layer.  Jdash includes component based custom element development framework. This framework allows you to develop and register custom elements easily.", 
            "title": "About dashlets"
        }, 
        {
            "location": "/client/dashlet-development/#defining-dashlets", 
            "text": "!-- Define  hello-world  element --  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n     /script  /j-dashlet   template element is used to set html dom elements. When a new instance of dashlet is created, elements inside template element is cloned and dom of new dashlet instance is created.  script  element is optional and allows you to execute javascript for dashlet.   After defining a dashlet you can add it to a dashboard or just use as custom element.  hello-world /hello-word   or add to a dashboard.  dashboard.addDashlet('hello-world');  Jdash also supports placing dashlet definition inside another file.  link rel= import  href= dashlets/helloworld.html   It is also possible to seperate dashlet dom and script. Below is an example.  !-- put a template element with an id value same as id of your dashlet --  template id= hello-world \n     h1 /h1  /template  j-dashlet id= hello-world  title= Hello world!  /j-dashlet  script \n\n// Define hello-world dashlet\njdash.define('hello-world', function () {\n\n    this.initialized = function () {\n        // Dom is ready!\n        var h1 = this.querySelector('h1')\n        h1.textContent = 'Hello World!';\n    }\n\n}) /script", 
            "title": "Defining dashlets"
        }, 
        {
            "location": "/client/dashlet-development/#dashlet-lifecycle", 
            "text": "Since Jdash uses custom elements as dashlets same rules for custom elements apply for dashlets.  Below code summarizes dashlet lifecycle.  jdash.define('hello-world', function () {\n\n    // a new instance is created.\n\n    this.initialized = function () {\n        // Dom is ready!\n    }\n\n    this.connected = function() {\n        // Attached to document\n    }\n\n    this.disconnected = function() {\n        // Detached from document\n    }\n\n})  See  W3C Custom Elements  document to get more information about custom elements.  Note: For backward compability we used ES5 style dashlet definition in this document. Jdash also supports ES6 and you can use  class  keyword and inherit from  Dashlet  to define your dashlet.", 
            "title": "Dashlet lifecycle"
        }, 
        {
            "location": "/client/dashlet-development/#configurable-dashlets", 
            "text": "", 
            "title": "Configurable dashlets"
        }, 
        {
            "location": "/client/dashlet-development/#defining-editor-element", 
            "text": "Use  j-dashlet-editor  element to define a dashlet editor. Same rules (templates, script, lifecycle etc.) are valid for dashlet editors since they are developed by Jdash component framework.  j-dashlet-editor id= hello-world-editor \n\n     template \n        Editor content goes here\n     /template \n\n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n\n        })\n     /script  /j-dashlet-editor   When a new dashlet is defined, Jdash looks for an element tag with postfixed by  -editor . For example if your dashlet is defined by  hello-world  Jdash looks for  hello-world-editor . If it finds it associates this tag as editor for your dashlet.  You can override this behaviour by explicitly setting a value to  j-editor  attribute.  j-dashlet id= hello-world  j-editor= my-editor  title= Hello world! /j-dashlet  j-dashlet-editor id= my-editor /j-dashlet-editor", 
            "title": "Defining editor element"
        }, 
        {
            "location": "/client/dashlet-development/#loading-configuration", 
            "text": "You can set and retrieve configuration values for dashlets. Configuration values are automatically converted to Json and stored on Jdash Cloud or on your backend.  j-dashlet id= hello-world  title= Hello world! \n     template \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.loadConfig = function () {\n                var h1 = this.querySelector('h1')\n                h1.textContent = this.config.get('header') || 'Hello World!';\n            }\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n        })\n     /script  /j-dashlet   If you attach a function named  loadConfig  to your dashlet Jdash automatically calls it when a new instance of your dashlet is created or after successfully saving new configuration values.  j-dashlet-editor id= hello-world-editor \n\n     template \n         h3 Set a header value: /h3 \n         input type= text \n     /template \n\n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                var inputEl = this.querySelector('input');\n                inputEl.value = this.dashlet.config.get('header') || '';\n            }\n\n            this.addEventListener('setconfig', function (event) {\n                var inputEl = this.querySelector('input'), value = inputEl.value;\n                if (!value) {\n                    alert('Set a valid value please!');\n                    event.preventDefault();\n                } else this.dashlet.config.set('header', value)\n            })\n\n        })\n     /script  /j-dashlet-editor   Add an event listener for  setconfig  event so that you can set new values for configuration.", 
            "title": "Loading configuration"
        }, 
        {
            "location": "/backend/", 
            "text": "Backend Development\n\n\nUsing JDash Cloud\n\n\nTo get more information about Jdash Cloud and authentication see \nJdash Cloud\n.\n\n\nNodeJS\n\n\nTo use Jdash on your own servers with your NodeJs application see \nNodeJs Development\n.\n\n\nNet Core\n\n\nTo use Jdash on your own servers with your Net Core application see \nNetCore Development\n.", 
            "title": "Backend Home"
        }, 
        {
            "location": "/backend/#backend-development", 
            "text": "", 
            "title": "Backend Development"
        }, 
        {
            "location": "/backend/#using-jdash-cloud", 
            "text": "To get more information about Jdash Cloud and authentication see  Jdash Cloud .", 
            "title": "Using JDash Cloud"
        }, 
        {
            "location": "/backend/#nodejs", 
            "text": "To use Jdash on your own servers with your NodeJs application see  NodeJs Development .", 
            "title": "NodeJS"
        }, 
        {
            "location": "/backend/#net-core", 
            "text": "To use Jdash on your own servers with your Net Core application see  NetCore Development .", 
            "title": "Net Core"
        }, 
        {
            "location": "/backend/jdash-cloud/", 
            "text": "JDash Cloud\n\n\nWhat is JDash Cloud?\n\n\nJDash Cloud is an api service which keeps all of your dashboard and dashlet configurations of your users. This allows you, as a developer, focus on dashlet development and user experience.\n\n\nHow Can I Use JDash Cloud Services?\n\n\nTo use JDash Cloud \nregister as a new user\n. After registration you will get an api key and test user token. \n\n\nApi key uniquely identifies your application. Usertoken is used to authenticate end user. \n\n\nAuthenticating users\n\n\nWe use Json Web Token(JTW) standard for authenticating your users for our Jdash Cloud. For more information about Json Web Token go to \nhttps://jwt.io\n.\n\n\nFor your JWT Payload we need 2 Claims :\n     \n\n        \n\n            Subject (sub)\n            \n\n                Your API Key will go here.\n            \n\n        \n\n        \n\n            Data (data)\n            \n\n                Your extra data will go here. This Data Property Must have a \"user\" property defines your user issued with this token.\n            \n\n        \n\n    \n\n\nWith these claims you will also need to sign token with your secret key that you have got from \nJDash Cloud Applications Page\n.\n\n\nYour JWT Payload should look like:\n\n\n{\n    data: {\n        user: \nUSERNAME OR USERID\n\n    },\n    sub: \nYOUR API KEY\n\n}\n\n\n\n\nPlease see  \nNodeJS Development\n or \n.Net Core Development\n for examples.\n\n\nIntegrating your server application to JDash Cloud\n\n\nBefore proceeding here please read \nGetting Started\n section first.\n\n\nLets say you have successfully created your backend authorization code at uri : \"/jdashauth?user=user1\".\n\n\nOn jdash.Provider.init function of jdash you will have to make some changes like below\n\n\n     jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: function(tokenCallback){\n                // make a XMLHttpRequest (aka Ajax call)\n                // you can use any ajax library ie $.ajax, we are just using basic stuff\n                var xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState == 4 \n xhr.status == 200) {\n                        // response JWT text will be passed to the JDash Token Callback\n                        tokenCallback(xhr.responseText);\n                    }\n                }\n                xhr.open('GET', '/jdashauth?user=user1', true);\n                xhr.send();\n            }\n        })\n\n\n\n\nIf the response is a valid JWT, JDash will use this JWT for authentication unless it expires. \n\n\nNotes:\n\n\n1- JDash will call userToken function when it needs a new token (initial token request or renewal of expired JWT).\n\n\n2- JDash JWT must be signed with a symmetric algorithm (Preffered  \"HS256\" algorithm). \n\n\n3- You can use any other claims instead of Data property and its values.\n\n\n4- You can use any headers / any header values such as expiration time.", 
            "title": "JDash Cloud"
        }, 
        {
            "location": "/backend/jdash-cloud/#jdash-cloud", 
            "text": "", 
            "title": "JDash Cloud"
        }, 
        {
            "location": "/backend/jdash-cloud/#what-is-jdash-cloud", 
            "text": "JDash Cloud is an api service which keeps all of your dashboard and dashlet configurations of your users. This allows you, as a developer, focus on dashlet development and user experience.", 
            "title": "What is JDash Cloud?"
        }, 
        {
            "location": "/backend/jdash-cloud/#how-can-i-use-jdash-cloud-services", 
            "text": "To use JDash Cloud  register as a new user . After registration you will get an api key and test user token.   Api key uniquely identifies your application. Usertoken is used to authenticate end user.", 
            "title": "How Can I Use JDash Cloud Services?"
        }, 
        {
            "location": "/backend/jdash-cloud/#authenticating-users", 
            "text": "We use Json Web Token(JTW) standard for authenticating your users for our Jdash Cloud. For more information about Json Web Token go to  https://jwt.io .  For your JWT Payload we need 2 Claims :\n      \n         \n            Subject (sub)\n             \n                Your API Key will go here.\n             \n         \n         \n            Data (data)\n             \n                Your extra data will go here. This Data Property Must have a \"user\" property defines your user issued with this token.\n             \n         \n      With these claims you will also need to sign token with your secret key that you have got from  JDash Cloud Applications Page .  Your JWT Payload should look like:  {\n    data: {\n        user:  USERNAME OR USERID \n    },\n    sub:  YOUR API KEY \n}  Please see   NodeJS Development  or  .Net Core Development  for examples.", 
            "title": "Authenticating users"
        }, 
        {
            "location": "/backend/jdash-cloud/#integrating-your-server-application-to-jdash-cloud", 
            "text": "Before proceeding here please read  Getting Started  section first.  Lets say you have successfully created your backend authorization code at uri : \"/jdashauth?user=user1\".  On jdash.Provider.init function of jdash you will have to make some changes like below       jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: function(tokenCallback){\n                // make a XMLHttpRequest (aka Ajax call)\n                // you can use any ajax library ie $.ajax, we are just using basic stuff\n                var xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState == 4   xhr.status == 200) {\n                        // response JWT text will be passed to the JDash Token Callback\n                        tokenCallback(xhr.responseText);\n                    }\n                }\n                xhr.open('GET', '/jdashauth?user=user1', true);\n                xhr.send();\n            }\n        })  If the response is a valid JWT, JDash will use this JWT for authentication unless it expires.", 
            "title": "Integrating your server application to JDash Cloud"
        }, 
        {
            "location": "/backend/jdash-cloud/#notes", 
            "text": "1- JDash will call userToken function when it needs a new token (initial token request or renewal of expired JWT).  2- JDash JWT must be signed with a symmetric algorithm (Preffered  \"HS256\" algorithm).   3- You can use any other claims instead of Data property and its values.  4- You can use any headers / any header values such as expiration time.", 
            "title": "Notes:"
        }, 
        {
            "location": "/backend/nodejs-dev/", 
            "text": "NodeJS Development\n\n\nThis article is about installing and using Jdash server libraries on your backend. If you decide to use Jdash Cloud you can skip this.\n\n\nIntegrate JDash server libraries into your existing NodeJs application is easy. \n\n\nStep 1: Install JDash-Express\n\n\nUse npm to install Jdash express library.\n\n\nnpm install jdash-express --save\n\n\n\n\nThis will create node_modules/jdash-express folder.\n\n\nNote: If this is the first time you use npm to add a package first execute npm init to create a package.json.\n\n\nStep 2: Attaching jdash-express middleware to your application\n\n\nIt is pretty easy to attach jdash your express application via jdash-express npm package. All you have to do is below\n\n\n// require jexpress and load the package\nvar jexpress = require('jdash-express'); \n\n// create a router for jdash\nvar jdashRoutes = express.Router();\n\n// jexpress acts as a middleware for specified route.\n// configura jexpress with router and user callback\n    jexpress({\n        principal: function (request) {\n            return {\n                user: request.user.id, // user identifier you must give this value unique per user\n                appid: request.app_id.toString() // if you have multiple applications you must give this value , otherwise just write your own application name.\n            }\n        },\n        provider: null // we will explain provider details below.\n    }).use(jdashRoutes);\n\n\n\n\nAbove code sample will attach jexpress api routes to the router you provided. Attach router to app?\n\n\nUsing providers\n\n\nCurrently Jdash supports MongoDB and MySQL to store and retreive dashboard data.\n\n\nYou can use \nprovider\n setting to configure \njdash-express\n library. \n\n\nUsing MongoDB\n\n\nvar mongoose = require('mongoose');\nvar jmongo = require('jdash-mongodb').default;\n\nvar connStr = 'Your connection string goes here'\nvar connection = mongoose.createConnection(connStr);\nconnection.on('connected',function()  {\n    jexpress({\n        principal: ....\n        provider: jmongo({\n            connection: connection\n        })\n    }).use(jdashRoutes);\n})\n\n\n\n\nUsing MySQL\n\n\nvar mysql = require('mysql');\nvar jmysql = require('jdash-mysqldb').default;\n\nvar connection = mysql.createPool({\n    connectionLimit: 100,\n    host: 'localhost',\n    port: 3306,\n    user: 'root',\n    password: '1234',\n    database: 'jdash_local'\n});\n\njexpress({\n        principal: ....\n        provider: jmysql({\n            connection: connection\n        })\n}).use(jdashRoutes);\n\n\n\n\n\nUsing jdash-auth-jwt for authorizing jdash-cloud requests.\n\n\n/// installation part for jdash-jwt\n\n\nYou must first install jsonwebtoken npm package \n\n\nnpm install jsonwebtoken --save\n\n/// install jdash-auth-jwt here\n\n\n\njdash-auth-jwt has interface below.\n\n\n    interface ITokenOptions {\n        secret: string;\n        apikey: string;\n        expirationInSeconds?: number;\n    }\n\n    userToken(user: string | Object, options: ITokenOptions): Promise\nstring\n;\n\n\n\n\nYou just require jdas-auth-jwt with default property. \n\n\n    var jdashAuth = require('jdash-auth-jwt').default;\n\n    var jwt = jdashAuth.userToken(user /* string or object */ , {\n        secret: /* your secret key */\n        apikey: /* your api key */,\n        expirationInSeconds: /* optional */\n    });\n\n\n\n\nJDash-Cloud will use this generated jwt for authorization of your users.\n\n\n(Please see  \nJDash Cloud\n for details.)", 
            "title": "NodeJS Development"
        }, 
        {
            "location": "/backend/nodejs-dev/#nodejs-development", 
            "text": "This article is about installing and using Jdash server libraries on your backend. If you decide to use Jdash Cloud you can skip this.  Integrate JDash server libraries into your existing NodeJs application is easy.", 
            "title": "NodeJS Development"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-1-install-jdash-express", 
            "text": "Use npm to install Jdash express library.  npm install jdash-express --save  This will create node_modules/jdash-express folder.  Note: If this is the first time you use npm to add a package first execute npm init to create a package.json.", 
            "title": "Step 1: Install JDash-Express"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-2-attaching-jdash-express-middleware-to-your-application", 
            "text": "It is pretty easy to attach jdash your express application via jdash-express npm package. All you have to do is below  // require jexpress and load the package\nvar jexpress = require('jdash-express'); \n\n// create a router for jdash\nvar jdashRoutes = express.Router();\n\n// jexpress acts as a middleware for specified route.\n// configura jexpress with router and user callback\n    jexpress({\n        principal: function (request) {\n            return {\n                user: request.user.id, // user identifier you must give this value unique per user\n                appid: request.app_id.toString() // if you have multiple applications you must give this value , otherwise just write your own application name.\n            }\n        },\n        provider: null // we will explain provider details below.\n    }).use(jdashRoutes);  Above code sample will attach jexpress api routes to the router you provided. Attach router to app?", 
            "title": "Step 2: Attaching jdash-express middleware to your application"
        }, 
        {
            "location": "/backend/nodejs-dev/#using-providers", 
            "text": "Currently Jdash supports MongoDB and MySQL to store and retreive dashboard data.  You can use  provider  setting to configure  jdash-express  library.", 
            "title": "Using providers"
        }, 
        {
            "location": "/backend/nodejs-dev/#using-mongodb", 
            "text": "var mongoose = require('mongoose');\nvar jmongo = require('jdash-mongodb').default;\n\nvar connStr = 'Your connection string goes here'\nvar connection = mongoose.createConnection(connStr);\nconnection.on('connected',function()  {\n    jexpress({\n        principal: ....\n        provider: jmongo({\n            connection: connection\n        })\n    }).use(jdashRoutes);\n})", 
            "title": "Using MongoDB"
        }, 
        {
            "location": "/backend/nodejs-dev/#using-mysql", 
            "text": "var mysql = require('mysql');\nvar jmysql = require('jdash-mysqldb').default;\n\nvar connection = mysql.createPool({\n    connectionLimit: 100,\n    host: 'localhost',\n    port: 3306,\n    user: 'root',\n    password: '1234',\n    database: 'jdash_local'\n});\n\njexpress({\n        principal: ....\n        provider: jmysql({\n            connection: connection\n        })\n}).use(jdashRoutes);", 
            "title": "Using MySQL"
        }, 
        {
            "location": "/backend/nodejs-dev/#using-jdash-auth-jwt-for-authorizing-jdash-cloud-requests", 
            "text": "/// installation part for jdash-jwt  You must first install jsonwebtoken npm package   npm install jsonwebtoken --save\n\n/// install jdash-auth-jwt here  jdash-auth-jwt has interface below.      interface ITokenOptions {\n        secret: string;\n        apikey: string;\n        expirationInSeconds?: number;\n    }\n\n    userToken(user: string | Object, options: ITokenOptions): Promise string ;  You just require jdas-auth-jwt with default property.       var jdashAuth = require('jdash-auth-jwt').default;\n\n    var jwt = jdashAuth.userToken(user /* string or object */ , {\n        secret: /* your secret key */\n        apikey: /* your api key */,\n        expirationInSeconds: /* optional */\n    });  JDash-Cloud will use this generated jwt for authorization of your users.  (Please see   JDash Cloud  for details.)", 
            "title": "Using jdash-auth-jwt for authorizing jdash-cloud requests."
        }, 
        {
            "location": "/backend/net-core-dev/", 
            "text": "", 
            "title": "Net Core Development"
        }
    ]
}