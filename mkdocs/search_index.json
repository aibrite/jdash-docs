{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nWelcome to JDash Documentation.\n\n\nJDash provides Javascript + Backend Platform for adding end-user designable dashboards into your web application.\n\n\nEnd-users can personalize your application better with JDash. Users can:\n\n\n\n\nCreate their own dashboards\n\n\nShare dashboards/dashlets\n\n\nConfigure dashlets\n\n\n\n\nFeatures\n\n\nClient-Side Features\n\n\n\n\nFully customizable user interface\n\n\nEasy dashlet development\n\n\nBuiltin themes for Bootstrap \n Material\n\n\nCustom themes\n\n\n\n\nPlease see \nClient Developoment Section\n to get more information.\n\n\nServer-Side Features\n\n\n\n\nEither use JDash Cloud or install on your servers\n\n\nSupport for NodeJs and .Net Core \n\n\nSupport for MongoDB, MySQL and Microsoft SQL Server\n\n\n\n\nPlease see \nBackend Developoment Section\n to get more information.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Welcome to JDash Documentation.  JDash provides Javascript + Backend Platform for adding end-user designable dashboards into your web application.  End-users can personalize your application better with JDash. Users can:   Create their own dashboards  Share dashboards/dashlets  Configure dashlets", 
            "title": "Welcome"
        }, 
        {
            "location": "/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/#client-side-features", 
            "text": "Fully customizable user interface  Easy dashlet development  Builtin themes for Bootstrap   Material  Custom themes   Please see  Client Developoment Section  to get more information.", 
            "title": "Client-Side Features"
        }, 
        {
            "location": "/#server-side-features", 
            "text": "Either use JDash Cloud or install on your servers  Support for NodeJs and .Net Core   Support for MongoDB, MySQL and Microsoft SQL Server   Please see  Backend Developoment Section  to get more information.", 
            "title": "Server-Side Features"
        }, 
        {
            "location": "/client/", 
            "text": "Client Development\n\n\nGetting Started\n\n\nTo start using JDash in 5 minutes, see \nGetting Started\n.\n\n\nBasic Concepts\n\n\nTo get more information about JDash architecture and licensing models, see \nBasic Concepts\n.\n\n\nProviders\n\n\nTo get more information about client providers, see \nProviders\n.\n\n\nDashboards\n\n\nTo get more information about using dashboards, see \nDashboards\n.\n\n\nDashlet Development\n\n\nTo get more information about developing dashlets, see \nDashlet Development\n.", 
            "title": "Client Home"
        }, 
        {
            "location": "/client/#client-development", 
            "text": "", 
            "title": "Client Development"
        }, 
        {
            "location": "/client/#getting-started", 
            "text": "To start using JDash in 5 minutes, see  Getting Started .", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/#basic-concepts", 
            "text": "To get more information about JDash architecture and licensing models, see  Basic Concepts .", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/#providers", 
            "text": "To get more information about client providers, see  Providers .", 
            "title": "Providers"
        }, 
        {
            "location": "/client/#dashboards", 
            "text": "To get more information about using dashboards, see  Dashboards .", 
            "title": "Dashboards"
        }, 
        {
            "location": "/client/#dashlet-development", 
            "text": "To get more information about developing dashlets, see  Dashlet Development .", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/getting-started/", 
            "text": "Getting Started\n\n\nQuick Start\n\n\nThe aim of this article is to get you up and running with JDash in 5 minutes.\n\n\nStep 1: Install JDash Client\n\n\nUse \nnpm\n to install JDash UI package.\n\n\nnpm install jdash-ui --save\n\n\n\n\nThis will create \nnode_modules/jdash-ui\n folder.\n\n\nNote: If this is the first time you use npm to add a package, first execute \nnpm init\n to create a \npackage.json\n.\n\n\nStep 2: Create a basic HTML page\n\n\nCreate index.html and paste the below code inside.\n\n\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta name=\nviewport\n content=\ninitial-scale=1, maximum-scale=1, user-scalable=no\n /\n\n    \ntitle\nJDash Tutorial\n/title\n\n\n    \n!-- jdash client library --\n\n    \nscript src=\nnode_modules/jdash-ui/dist/jdash.min.js\n/script\n\n\n    \n!-- jdash theme \n elements --\n\n    \nlink rel=\nimport\n href=\nnode_modules/jdash-ui/dist/components/jdash.html\n\n\n/head\n\n\n\nbody class=\nj-light-gray j-padding\n\n\n\n/body\n\n\n\n/html\n\n\n\n\n\nStep 3: Develop your first dashlet\n\n\nUse \nj-dashlet\n element to define a dashlet. \n\n\nContent of \nj-dashlet\n can include \ntemplate\n element, which can be used to define dom (innerHTML) of your dashlet. \n\n\nAn optional \nscript\n element inside \nj-dashlet\n can be used to execute Javascript for this dashlet. That simple \n clear!\n\n\nCopy the following code inside \nbody\n tag. \n\n\n!-- Define \nhello-world\n dashlet --\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready! this refers to actual element instance.\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nStep 4: Get a free Api Key\n\n\nJDash Cloud can persist and retrieve dashboard data, i.e. dashboards, layouts, dashlet configurations and positions.\n\n\nTo use JDash Cloud \nregister as a new user\n. After registration, you will get an Api Key and Test User Token. Use these data to configure authentication.\n\n\nTodo so, add a \nscript\n element just before \n/body\n tag.\n\n\n    \nscript\n\n        jdash.ready(function () {\n            jdash.Provider.init({\n                apiKey: 'YOUR API KEY',\n                userToken: 'USER TOKEN'\n            })\n        })\n    \n/script\n\n\n/body\n\n\n\n\n\napikey\n:  Identifies your application.\n\n\nuserToken\n:  A string value or function to identify your end-user to JDash Cloud.\n\n\nStep 5: Create and display dashboard\n\n\nUse \nj-dashboard\n element to display a dashboard. \n\n\nAppend the following code inside \nbody\n tag.\n\n\n    \nbutton id=\ncreateDashboardBtn\nCreate Dashboard\n/button\n\n    \nbutton id=\naddDashletBtn\nAdd Dashlet\n/button\n\n    \ndiv id=\ndashboardList\n/div\n\n\n    \nj-dashboard id=\ndashboard\n j-view-mode=\ndashletedit\n\n        \nh2 j-bind=\ntitle\n/h2\n\n    \n/j-dashboard\n\n\n/body\n\n\n\n\n\nSet event handlers inside \njdash.ready\n handler.\n\n\nscript\n\n    jdash.ready(function () {\n\n        jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: 'USER TOKEN'\n        })\n\n        // createDashboardList();\n\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                //createDashboardList();\n                dashboard.load(result.id);\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    })\n\n/script\n\n\n/body\n\n\n\n\n\nStep 6: View Dashboards\n\n\nAs the last step, we will implement a code to view existing dashboards.\n\n\njdash.Provider.getMyDashboards\n method returns a list of dashboards that the current user owns. Note that you initialize current credentials by setting a valid value for \nuserToken\n param for \njdash.Provider.init\n method.\n\n\nAdd following function inside \nscript\n element.\n\n\nfunction createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i \n result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}\n\n\n\n\nUncomment this function when page loads / user creates a new dashboard so that dashboard list is updated.\n\n\nStep 7: Download Source Code\n\n\nSource code of this guide can be found at this \nGitHub Repo\n.\n\n\nIf you enjoy JDash, you can continue from Basic Concepts.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/getting-started/#quick-start", 
            "text": "The aim of this article is to get you up and running with JDash in 5 minutes.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/client/getting-started/#step-1-install-jdash-client", 
            "text": "Use  npm  to install JDash UI package.  npm install jdash-ui --save  This will create  node_modules/jdash-ui  folder.  Note: If this is the first time you use npm to add a package, first execute  npm init  to create a  package.json .", 
            "title": "Step 1: Install JDash Client"
        }, 
        {
            "location": "/client/getting-started/#step-2-create-a-basic-html-page", 
            "text": "Create index.html and paste the below code inside.  !DOCTYPE html  html lang= en  head \n     meta charset= utf-8 \n     meta name= viewport  content= initial-scale=1, maximum-scale=1, user-scalable=no  / \n     title JDash Tutorial /title \n\n     !-- jdash client library -- \n     script src= node_modules/jdash-ui/dist/jdash.min.js /script \n\n     !-- jdash theme   elements -- \n     link rel= import  href= node_modules/jdash-ui/dist/components/jdash.html  /head  body class= j-light-gray j-padding  /body  /html", 
            "title": "Step 2: Create a basic HTML page"
        }, 
        {
            "location": "/client/getting-started/#step-3-develop-your-first-dashlet", 
            "text": "Use  j-dashlet  element to define a dashlet.   Content of  j-dashlet  can include  template  element, which can be used to define dom (innerHTML) of your dashlet.   An optional  script  element inside  j-dashlet  can be used to execute Javascript for this dashlet. That simple   clear!  Copy the following code inside  body  tag.   !-- Define  hello-world  dashlet --  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready! this refers to actual element instance.\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n     /script  /j-dashlet", 
            "title": "Step 3: Develop your first dashlet"
        }, 
        {
            "location": "/client/getting-started/#step-4-get-a-free-api-key", 
            "text": "JDash Cloud can persist and retrieve dashboard data, i.e. dashboards, layouts, dashlet configurations and positions.  To use JDash Cloud  register as a new user . After registration, you will get an Api Key and Test User Token. Use these data to configure authentication.  Todo so, add a  script  element just before  /body  tag.       script \n        jdash.ready(function () {\n            jdash.Provider.init({\n                apiKey: 'YOUR API KEY',\n                userToken: 'USER TOKEN'\n            })\n        })\n     /script  /body   apikey\n:  Identifies your application.  userToken\n:  A string value or function to identify your end-user to JDash Cloud.", 
            "title": "Step 4: Get a free Api Key"
        }, 
        {
            "location": "/client/getting-started/#step-5-create-and-display-dashboard", 
            "text": "Use  j-dashboard  element to display a dashboard.   Append the following code inside  body  tag.       button id= createDashboardBtn Create Dashboard /button \n     button id= addDashletBtn Add Dashlet /button \n     div id= dashboardList /div \n\n     j-dashboard id= dashboard  j-view-mode= dashletedit \n         h2 j-bind= title /h2 \n     /j-dashboard  /body   Set event handlers inside  jdash.ready  handler.  script \n    jdash.ready(function () {\n\n        jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: 'USER TOKEN'\n        })\n\n        // createDashboardList();\n\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                //createDashboardList();\n                dashboard.load(result.id);\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    }) /script  /body", 
            "title": "Step 5: Create and display dashboard"
        }, 
        {
            "location": "/client/getting-started/#step-6-view-dashboards", 
            "text": "As the last step, we will implement a code to view existing dashboards.  jdash.Provider.getMyDashboards  method returns a list of dashboards that the current user owns. Note that you initialize current credentials by setting a valid value for  userToken  param for  jdash.Provider.init  method.  Add following function inside  script  element.  function createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i   result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}  Uncomment this function when page loads / user creates a new dashboard so that dashboard list is updated.", 
            "title": "Step 6: View Dashboards"
        }, 
        {
            "location": "/client/getting-started/#step-7-download-source-code", 
            "text": "Source code of this guide can be found at this  GitHub Repo .  If you enjoy JDash, you can continue from Basic Concepts.", 
            "title": "Step 7: Download Source Code"
        }, 
        {
            "location": "/client/basic-concepts/", 
            "text": "Basic Concepts\n\n\nUsing JDash you can add drag-drop end user designable dashboards to your application.\n\n\nFeatures\n\n\nLicensing Models\n\n\nThere are two licensing models.\n\n\nJDash Cloud\n\nYou can use \nJDash Cloud\n to store dashboard \n dashlet related data. \n\n\nIf you have a cloud based application and don't want to integrate JDash backend platform into your server application, this is an ideal, cheap and fast solution to get you up.\n\n\nOn Premise\n\nIf you are a developer/company, who develops applications for other customers or if you have a product, into which you want to embed JDash, this is the right license type for you.\n\n\nYou can integrate JDash backend platform into your server application easily.\n\n\n\n\nIf you are using NodeJs, we support it with MongoDB and MySQL.\n\n\nIf you are using Asp.Net MVC 5+, we support it with MySQL and MSSQL.\n\n\nIf you are using .Net Core, we support it with MySQL and MSSQL.\n\n\n\n\nIf you need other platforms/database servers just drop us an e-mail (hello@jdash.io).\n\n\nCustom elements\n\n\nJDash uses W3C custom elements spec for dashlet development. \n\n\nOn top of this spec, we developed a component framework to make dashlet development easier.\n\n\nHere is a sample dashlet.\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \n!-- Think template as user interface layer of your dashlet --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n\n        // An optional javascript function allows you implement\n        // your business logic.\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nAbove code snippet defines \nhello-world\n custom element, which inherits from \njdash.Dashlet\n class.\n\n\nYou can also use this element directly inside your HTML.\n\n\nhello-world\n/hello-world\n\n\n\n\n\nKey elements\n\n\nBelow table shows key elements and descriptions.\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nj-dashboard\n\n\nDisplays dashboard\n\n\n\n\n\n\nj-dashlet\n\n\nDefines a new dashlet element\n\n\n\n\n\n\nj-grid-layout\n\n\nMulti column/row layout\n\n\n\n\n\n\n\n\nDashboard element contains one layout element and many dashlets inside that layout element. Layout is responsible for managing drag-drop, resizing and saving/loading dashlet positions.\n\n\nIt is also possible to develop new layout elements by inheriting \njdash.DashboardLayout\n class. Currently JDash framework contains one layout element: \nj-grid-layout\n.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/basic-concepts/#basic-concepts", 
            "text": "Using JDash you can add drag-drop end user designable dashboards to your application.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/basic-concepts/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/client/basic-concepts/#licensing-models", 
            "text": "There are two licensing models.  JDash Cloud \nYou can use  JDash Cloud  to store dashboard   dashlet related data.   If you have a cloud based application and don't want to integrate JDash backend platform into your server application, this is an ideal, cheap and fast solution to get you up.  On Premise \nIf you are a developer/company, who develops applications for other customers or if you have a product, into which you want to embed JDash, this is the right license type for you.  You can integrate JDash backend platform into your server application easily.   If you are using NodeJs, we support it with MongoDB and MySQL.  If you are using Asp.Net MVC 5+, we support it with MySQL and MSSQL.  If you are using .Net Core, we support it with MySQL and MSSQL.   If you need other platforms/database servers just drop us an e-mail (hello@jdash.io).", 
            "title": "Licensing Models"
        }, 
        {
            "location": "/client/basic-concepts/#custom-elements", 
            "text": "JDash uses W3C custom elements spec for dashlet development.   On top of this spec, we developed a component framework to make dashlet development easier.  Here is a sample dashlet.  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         !-- Think template as user interface layer of your dashlet -- \n         h1 /h1 \n     /template \n     script \n\n        // An optional javascript function allows you implement\n        // your business logic.\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n        })\n     /script  /j-dashlet   Above code snippet defines  hello-world  custom element, which inherits from  jdash.Dashlet  class.  You can also use this element directly inside your HTML.  hello-world /hello-world", 
            "title": "Custom elements"
        }, 
        {
            "location": "/client/basic-concepts/#key-elements", 
            "text": "Below table shows key elements and descriptions.     Element  Description      j-dashboard  Displays dashboard    j-dashlet  Defines a new dashlet element    j-grid-layout  Multi column/row layout     Dashboard element contains one layout element and many dashlets inside that layout element. Layout is responsible for managing drag-drop, resizing and saving/loading dashlet positions.  It is also possible to develop new layout elements by inheriting  jdash.DashboardLayout  class. Currently JDash framework contains one layout element:  j-grid-layout .", 
            "title": "Key elements"
        }, 
        {
            "location": "/client/working-with-providers/", 
            "text": "Working with Provider\n\n\nProvider Basics\n\n\nJDash uses \njdash.Provider\n methods to create, save and delete dashboards and dashlets.\n\n\nProvider should be initialized before using any of the below methods. \n\n\nInitializing Provider\n\n\nIf you are using JDash Cloud, initializing means setting a valid Api Key and User Token.\n\n\nAfter \nregistering as a new user\n, you will get an Api Key and a Test User Token. Use these data to initialize provider.\n\n\njdash.ready(function () {\n    jdash.Provider.init({\n        apiKey: 'YOUR API KEY',\n        userToken: 'USER TOKEN'\n    })\n})\n\n\n\n\nUser Based Design\n\n\nIn JDash, a dashboard belongs to a user. A user may have many dashboards and a dashboard contains dashlets.\n\n\nThis allows your users to create and design their own dashboards.\n\n\nWhen you initialize provider, \napiKey\n represents your application in JDash Cloud. \nuserToken\n allows you to set a security token for the current user. Methods like \ncreateDashboard\n uses this token to assign dashboard to the current user. \n\n\nMethods and Samples\n\n\nUse \ngetDashboard\n method to get dashboard model with dashboard id.\n\n\njdash.Provider.getDashboard('58b72f14421b57354bf58cc5').then(function(model) { \n        console.log(model)\n    }).catch(function(err) { \n        console.log(err)\n    })\n\n\n\n\nAll provider methods return promises. \n\n\nUse \ncreateDashboard\n method to create a dashboard.\n\n\njdash.Provider.createDashboard({\n    title: 'My dashboard'\n}).then(function (result) {\n    console.log('Dashboard created with id:' + result.id);\n    dashboard.load(result.id);\n}).catch(function (err) {\n    alert('There was an error creating dashboard: ' + err.message || err)\n})\n\n\n\n\nNote that the user, who creates the dashboard is automatically retreived from the User Token.\n\n\nUse \ngetMyDashboards\n method to get a list of dashboards, which belongs to the current user.\n\n\nUse \nsearchDashboards\n method to search for dashboards.\n\n\nUse \ndeleteDashboard\n method to delete a dashboard. When a dashboard is deleted, all dashlets inside that dashboard are also automatically deleted.\n\n\nUse \nsaveDashboard\n to update a dashboard.\n\n\nProvider also has CRUD methods for dashlets. Although you can use these methods directly, it's a better practice to use the methods of \nj-dashboard\n element to create, remove or save dashlets.\n\n\nBelow table is a summary of methods for dashlets:\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreateDashlet\n\n\nCreates dashlet\n\n\n\n\n\n\nsaveDashlet\n\n\nUpdates a dashlet\n\n\n\n\n\n\ndeleteDashlet\n\n\nDeletes a dashlet\n\n\n\n\n\n\n\n\nKey interfaces\n\n\njdash.Provider\n implements \nIClientProvider\n interface.\n\n\ninterface IClientProvider {\n    getDashboard(id: string): Promise\nGetDashboardResult\n;\n    createDashboard(model: DashboardCreateModel): Promise\nCreateResult\n;\n    getMyDashboards(query?: Query): Promise\nQueryResult\nDashboardModel\n;\n    searchDashboards(search?: ISearchDashboards, query?: Query): Promise\nQueryResult\nDashboardModel\n;\n    deleteDashboard(id: string): Promise\nany\n;\n    saveDashboard(id: string, updateValues: DashboardUpdateModel): Promise\nany\n;\n    createDashlet(model: DashletCreateModel): Promise\nCreateResult\n;\n    deleteDashlet(id: string): Promise\nany\n;\n    saveDashlet(id: string, updateValues: DashletUpdateModel): Promise\nany\n;\n}\n\n\n\n\nSee below definitions for dashboard, dashlet and common data types.\n\n\n\ninterface DashboardModel {\n    id: string;\n    title: string;\n    appid: string;\n    user: string;\n    config: {\n        [key: string]: any;\n    };\n    description: string;\n    layout: LayoutModel;\n    createdAt: Date;\n    shareWith?: string;\n}\n\ninterface DashletModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n    createdAt: Date;\n}\n\ninterface ISearchDashboards {\n    user: string | Array\nstring\n;\n    shareWith?: string | Array\nstring\n;\n}\n\ninterface Query {\n    limit: number;\n    startFrom?: any;\n}\n\ninterface SearchQuery extends Query {\n    filters: any;\n}\n\ninterface QueryResult\nT\n {\n    data: Array\nT\n;\n    hasMore: boolean;\n}\n\ninterface CreateResult {\n    id: string;\n}\n\ninterface GetDashboardResult {\n    dashboard: DashboardModel;\n    dashlets: Array\nDashletModel\n;\n}\n\ninterface DashboardCreateModel {\n    id?: string;\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n    user?: string;\n}\n\ninterface DashboardUpdateModel {\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout?: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n}\n\n\n\ninterface DashletPositionModel {\n    zone?: string;\n    y?: number;\n    x?: number;\n    z?: number;\n}\n\ninterface DashletCreateModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface DashletUpdateModel {\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface LayoutDashletMetaModel {\n    data?: any;\n    position?: DashletPositionModel;\n}\n\ninterface LayoutModel {\n    moduleId: string;\n    config?: {\n        [key: string]: any;\n    };\n    dashlets?: {\n        [key: string]: LayoutDashletMetaModel;\n    };\n}", 
            "title": "Providers"
        }, 
        {
            "location": "/client/working-with-providers/#working-with-provider", 
            "text": "", 
            "title": "Working with Provider"
        }, 
        {
            "location": "/client/working-with-providers/#provider-basics", 
            "text": "JDash uses  jdash.Provider  methods to create, save and delete dashboards and dashlets.  Provider should be initialized before using any of the below methods.", 
            "title": "Provider Basics"
        }, 
        {
            "location": "/client/working-with-providers/#initializing-provider", 
            "text": "If you are using JDash Cloud, initializing means setting a valid Api Key and User Token.  After  registering as a new user , you will get an Api Key and a Test User Token. Use these data to initialize provider.  jdash.ready(function () {\n    jdash.Provider.init({\n        apiKey: 'YOUR API KEY',\n        userToken: 'USER TOKEN'\n    })\n})", 
            "title": "Initializing Provider"
        }, 
        {
            "location": "/client/working-with-providers/#user-based-design", 
            "text": "In JDash, a dashboard belongs to a user. A user may have many dashboards and a dashboard contains dashlets.  This allows your users to create and design their own dashboards.  When you initialize provider,  apiKey  represents your application in JDash Cloud.  userToken  allows you to set a security token for the current user. Methods like  createDashboard  uses this token to assign dashboard to the current user.", 
            "title": "User Based Design"
        }, 
        {
            "location": "/client/working-with-providers/#methods-and-samples", 
            "text": "Use  getDashboard  method to get dashboard model with dashboard id.  jdash.Provider.getDashboard('58b72f14421b57354bf58cc5').then(function(model) { \n        console.log(model)\n    }).catch(function(err) { \n        console.log(err)\n    })  All provider methods return promises.   Use  createDashboard  method to create a dashboard.  jdash.Provider.createDashboard({\n    title: 'My dashboard'\n}).then(function (result) {\n    console.log('Dashboard created with id:' + result.id);\n    dashboard.load(result.id);\n}).catch(function (err) {\n    alert('There was an error creating dashboard: ' + err.message || err)\n})  Note that the user, who creates the dashboard is automatically retreived from the User Token.  Use  getMyDashboards  method to get a list of dashboards, which belongs to the current user.  Use  searchDashboards  method to search for dashboards.  Use  deleteDashboard  method to delete a dashboard. When a dashboard is deleted, all dashlets inside that dashboard are also automatically deleted.  Use  saveDashboard  to update a dashboard.  Provider also has CRUD methods for dashlets. Although you can use these methods directly, it's a better practice to use the methods of  j-dashboard  element to create, remove or save dashlets.  Below table is a summary of methods for dashlets:     Method  Description      createDashlet  Creates dashlet    saveDashlet  Updates a dashlet    deleteDashlet  Deletes a dashlet", 
            "title": "Methods and Samples"
        }, 
        {
            "location": "/client/working-with-providers/#key-interfaces", 
            "text": "jdash.Provider  implements  IClientProvider  interface.  interface IClientProvider {\n    getDashboard(id: string): Promise GetDashboardResult ;\n    createDashboard(model: DashboardCreateModel): Promise CreateResult ;\n    getMyDashboards(query?: Query): Promise QueryResult DashboardModel ;\n    searchDashboards(search?: ISearchDashboards, query?: Query): Promise QueryResult DashboardModel ;\n    deleteDashboard(id: string): Promise any ;\n    saveDashboard(id: string, updateValues: DashboardUpdateModel): Promise any ;\n    createDashlet(model: DashletCreateModel): Promise CreateResult ;\n    deleteDashlet(id: string): Promise any ;\n    saveDashlet(id: string, updateValues: DashletUpdateModel): Promise any ;\n}  See below definitions for dashboard, dashlet and common data types.  \ninterface DashboardModel {\n    id: string;\n    title: string;\n    appid: string;\n    user: string;\n    config: {\n        [key: string]: any;\n    };\n    description: string;\n    layout: LayoutModel;\n    createdAt: Date;\n    shareWith?: string;\n}\n\ninterface DashletModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n    createdAt: Date;\n}\n\ninterface ISearchDashboards {\n    user: string | Array string ;\n    shareWith?: string | Array string ;\n}\n\ninterface Query {\n    limit: number;\n    startFrom?: any;\n}\n\ninterface SearchQuery extends Query {\n    filters: any;\n}\n\ninterface QueryResult T  {\n    data: Array T ;\n    hasMore: boolean;\n}\n\ninterface CreateResult {\n    id: string;\n}\n\ninterface GetDashboardResult {\n    dashboard: DashboardModel;\n    dashlets: Array DashletModel ;\n}\n\ninterface DashboardCreateModel {\n    id?: string;\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n    user?: string;\n}\n\ninterface DashboardUpdateModel {\n    title?: string;\n    description?: string;\n    shareWith?: string;\n    layout?: LayoutModel;\n    config?: {\n        [key: string]: any;\n    };\n}\n\n\n\ninterface DashletPositionModel {\n    zone?: string;\n    y?: number;\n    x?: number;\n    z?: number;\n}\n\ninterface DashletCreateModel {\n    moduleId: string;\n    dashboardId: string;\n    id?: string;\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface DashletUpdateModel {\n    title?: string;\n    description?: string;\n    configuration?: {\n        [key: string]: any;\n    };\n}\n\ninterface LayoutDashletMetaModel {\n    data?: any;\n    position?: DashletPositionModel;\n}\n\ninterface LayoutModel {\n    moduleId: string;\n    config?: {\n        [key: string]: any;\n    };\n    dashlets?: {\n        [key: string]: LayoutDashletMetaModel;\n    };\n}", 
            "title": "Key interfaces"
        }, 
        {
            "location": "/client/working-with-dashboards/", 
            "text": "Working with Dashboards\n\n\nj-dashboard Element\n\n\nUse \nj-dashboard\nelement to display an existing dashboard.\n\n\nj-dashboard id=\ndashboard\n\n    \nh2 j-bind=\ntitle\n/h2\n\n\n/j-dashboard\n\n\n\n\n\nViewing Dashboard\n\n\nUse \nload\n method to load (display) a dashboard.\n\n\nload(id: string | DashboardModel): Promise\nDashboardModel\n;\n\n\n\n\nload\nmethod returns a promise and you can use dashboard id or \nDashboardModel\n.\n\n\nAs a common scenario, you can use \njdash.Provider.getMyDashboards\n method to get a list of dashboard for the current user. After a click on a dashboard, use \nload\n method to display selected dashboard.\n\n\nRefer to Getting Started for the sample usage of \nload\n method.\n\n\nAbout View Modes\n\n\nA dashboard may have one of the following view modes:\n\n\n\n\n\n\n\n\nView mode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreadonly\n\n\nDisplays dashboard in readonly mode. Best for viewing dashboard\n\n\n\n\n\n\ndashletedit\n\n\nUser can edit dashlet properties and positions. Best for creating and configuring dashlets\n\n\n\n\n\n\nlayoutedit\n\n\nUser can edit layout of dashboard. Best for desiging structure of dashboard.\n\n\n\n\n\n\n\n\nSet initialize dashboard view mode use \nj-view-mode\n attribute of \nj-dashboard\n element. \n\n\nj-dashboard id=\ndashboard\n j-view-mode=\ndashletedit\n\n\n\n/j-dashboard\n\n\n\n\n\nYou can also use \nHTMLElement.setAttribute\n method to change it later.\n\n\nvar dashboard = document.querySelector('#dashboard');\ndashboard.setAttribute('j-view-mode', 'readonly');\n\n\n\n\nAdding Dashlets\n\n\nGetting a list of available dashlets\n\n\nUse \njdash.DashletModule.getModule\n method to get a list of available dashlet elements. Refer to Dashlet Development (next section) for more information on defining dashlets.\n\n\nYou can use \ntitle\n attribute to display a dashlet to user. \nid\n attribute can be used to create an instance.\n\n\nvar dashletElements = jdash.DashletModule.getModules();\nfor(var i = 0; i \n dashletElements.length;i++) \n    console.log(dashletElements[i].title, ',', dashletElements[i].id)\n\n\n\n\nAn example output can be\n\n\nHello World, hello-world\nAstronomy of Day, nasa-apod-dashlet\nRss Dashlet, rss-dashlet\nChart Dashlet, chart-dashlet\nPure HTML, content-dashlet\nRich Content, rich-content\n\n\n\n\nAdding dashlet to dashboard\n\n\nUse \naddDashlet\n method of \nj-dashboard\nelement to create a new dashlet.\n\n\ndashboard.addDashlet('hello-world');\n\n\n\n\nYou can also create a dashlet instance and use that instance instead of using element tag.\n\n\nvar mydashlet = document.createElement('hello-word');\nmydashlet.title = 'Say Hi to me!';\ndashboard.addDashlet(mydashlet);\n\n\n\n\nj-dashboard\nelement automatically calls \ncreateDashlet\nmethod of provider so new dashlet is persisted and will be available when dashboard loads at later.\n\n\nDrag-drop adding\n\n\nAs an alternative you can use makeDroppable method of layout. This lets yo to create an HTML element for a dashlet and users can add this dashlet just by dropping to the dashboard element.\n\n\nRefer to sample applications to see how to use \nmakeDroppable\n method.", 
            "title": "Working with Dashboards"
        }, 
        {
            "location": "/client/working-with-dashboards/#working-with-dashboards", 
            "text": "", 
            "title": "Working with Dashboards"
        }, 
        {
            "location": "/client/working-with-dashboards/#j-dashboard-element", 
            "text": "Use  j-dashboard element to display an existing dashboard.  j-dashboard id= dashboard \n     h2 j-bind= title /h2  /j-dashboard", 
            "title": "j-dashboard Element"
        }, 
        {
            "location": "/client/working-with-dashboards/#viewing-dashboard", 
            "text": "Use  load  method to load (display) a dashboard.  load(id: string | DashboardModel): Promise DashboardModel ;  load method returns a promise and you can use dashboard id or  DashboardModel .  As a common scenario, you can use  jdash.Provider.getMyDashboards  method to get a list of dashboard for the current user. After a click on a dashboard, use  load  method to display selected dashboard.  Refer to Getting Started for the sample usage of  load  method.", 
            "title": "Viewing Dashboard"
        }, 
        {
            "location": "/client/working-with-dashboards/#about-view-modes", 
            "text": "A dashboard may have one of the following view modes:     View mode  Description      readonly  Displays dashboard in readonly mode. Best for viewing dashboard    dashletedit  User can edit dashlet properties and positions. Best for creating and configuring dashlets    layoutedit  User can edit layout of dashboard. Best for desiging structure of dashboard.     Set initialize dashboard view mode use  j-view-mode  attribute of  j-dashboard  element.   j-dashboard id= dashboard  j-view-mode= dashletedit  /j-dashboard   You can also use  HTMLElement.setAttribute  method to change it later.  var dashboard = document.querySelector('#dashboard');\ndashboard.setAttribute('j-view-mode', 'readonly');", 
            "title": "About View Modes"
        }, 
        {
            "location": "/client/working-with-dashboards/#adding-dashlets", 
            "text": "", 
            "title": "Adding Dashlets"
        }, 
        {
            "location": "/client/working-with-dashboards/#getting-a-list-of-available-dashlets", 
            "text": "Use  jdash.DashletModule.getModule  method to get a list of available dashlet elements. Refer to Dashlet Development (next section) for more information on defining dashlets.  You can use  title  attribute to display a dashlet to user.  id  attribute can be used to create an instance.  var dashletElements = jdash.DashletModule.getModules();\nfor(var i = 0; i   dashletElements.length;i++) \n    console.log(dashletElements[i].title, ',', dashletElements[i].id)  An example output can be  Hello World, hello-world\nAstronomy of Day, nasa-apod-dashlet\nRss Dashlet, rss-dashlet\nChart Dashlet, chart-dashlet\nPure HTML, content-dashlet\nRich Content, rich-content", 
            "title": "Getting a list of available dashlets"
        }, 
        {
            "location": "/client/working-with-dashboards/#adding-dashlet-to-dashboard", 
            "text": "Use  addDashlet  method of  j-dashboard element to create a new dashlet.  dashboard.addDashlet('hello-world');  You can also create a dashlet instance and use that instance instead of using element tag.  var mydashlet = document.createElement('hello-word');\nmydashlet.title = 'Say Hi to me!';\ndashboard.addDashlet(mydashlet);  j-dashboard element automatically calls  createDashlet method of provider so new dashlet is persisted and will be available when dashboard loads at later.", 
            "title": "Adding dashlet to dashboard"
        }, 
        {
            "location": "/client/working-with-dashboards/#drag-drop-adding", 
            "text": "As an alternative you can use makeDroppable method of layout. This lets yo to create an HTML element for a dashlet and users can add this dashlet just by dropping to the dashboard element.  Refer to sample applications to see how to use  makeDroppable  method.", 
            "title": "Drag-drop adding"
        }, 
        {
            "location": "/client/dashlet-development/", 
            "text": "Dashlet Development\n\n\nAbout Dashlets\n\n\nIn JDash, \nDashlet\n means a custom element which consists of Html dom elements and optional business layer.\n\n\nJDash includes component based custom element development framework. This framework allows you to develop and register custom elements easily.\n\n\nDefining Dashlets\n\n\n!-- Define \nhello-world\n element --\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\ntemplate\nelement is used to set html dom elements. When a new instance of dashlet is created, elements inside template element is cloned and dom of new dashlet instance is created.\n\n\nscript\n element is optional and allows you to execute Javascript for dashlet. \n\n\nAfter defining a dashlet, you can add it to a dashboard or just use it as a custom element.\n\n\nhello-world\n/hello-word\n\n\n\n\n\nor add to a dashboard.\n\n\ndashboard.addDashlet('hello-world');\n\n\n\n\nJDash also supports placing dashlet definition inside another file.\n\n\nlink rel=\nimport\n href=\ndashlets/helloworld.html\n\n\n\n\n\nIt is also possible to seperate dashlet dom and script. Below is an example.\n\n\n!-- put a template element with an id value same as id of your dashlet --\n\n\ntemplate id=\nhello-world\n\n    \nh1\n/h1\n\n\n/template\n\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n\n/j-dashlet\n\n\n\nscript\n\n\n// Define hello-world dashlet\njdash.define('hello-world', function () {\n\n    this.initialized = function () {\n        // Dom is ready!\n        var h1 = this.querySelector('h1')\n        h1.textContent = 'Hello World!';\n    }\n\n})\n\n/script\n\n\n\n\n\nDashlet Lifecycle\n\n\nSince JDash uses custom elements as dashlets, same rules for custom elements apply for dashlets.\n\n\nBelow code summarizes dashlet lifecycle.\n\n\njdash.define('hello-world', function () {\n\n    // a new instance is created.\n\n    this.initialized = function () {\n        // Dom is ready!\n    }\n\n    this.connected = function() {\n        // Attached to document\n    }\n\n    this.disconnected = function() {\n        // Detached from document\n    }\n\n})\n\n\n\n\nSee \nW3C Custom Elements\n document to get more information about custom elements.\n\n\nNote: For backward compability we used ES5 style dashlet definition in this document. JDash also supports ES6 and you can use \nclass\n keyword and inherit from \nDashlet\n to define your dashlet.\n\n\nConfigurable Dashlets\n\n\nDefining Editor Element\n\n\nUse \nj-dashlet-editor\n element to define a dashlet editor. Same rules (templates, script, lifecycle etc.) are valid for dashlet editors since they are developed with JDash component framework.\n\n\nj-dashlet-editor id=\nhello-world-editor\n\n\n    \ntemplate\n\n        Editor content goes here\n    \n/template\n\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n\n        })\n    \n/script\n\n\n\n/j-dashlet-editor\n\n\n\n\n\nWhen a new dashlet is defined, JDash looks for an element tag that is postfixed by \n-editor\n. For example if your dashlet is defined by \nhello-world\n JDash looks for \nhello-world-editor\n. If it finds such element, it associates this tag as editor for your dashlet.\n\n\nYou can override this behaviour by explicitly setting a value to \nj-editor\n attribute.\n\n\nj-dashlet id=\nhello-world\n j-editor=\nmy-editor\n title=\nHello world!\n/j-dashlet\n\n\nj-dashlet-editor id=\nmy-editor\n/j-dashlet-editor\n\n\n\n\n\nLoading Configuration\n\n\nYou can set and retrieve configuration values for dashlets. Configuration values are automatically converted to Json and stored on JDash Cloud or on your backend.\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.loadConfig = function () {\n                var h1 = this.querySelector('h1')\n                h1.textContent = this.config.get('header') || 'Hello World!';\n            }\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nIf you attach a function named \nloadConfig\n to your dashlet, JDash automatically calls it when a new instance of your dashlet is created or after successfully saving new configuration values.\n\n\nj-dashlet-editor id=\nhello-world-editor\n\n\n    \ntemplate\n\n        \nh3\nSet a header value:\n/h3\n\n        \ninput type=\ntext\n\n    \n/template\n\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                var inputEl = this.querySelector('input');\n                inputEl.value = this.dashlet.config.get('header') || '';\n            }\n\n            this.addEventListener('setconfig', function (event) {\n                var inputEl = this.querySelector('input'), value = inputEl.value;\n                if (!value) {\n                    alert('Set a valid value please!');\n                    event.preventDefault();\n                } else this.dashlet.config.set('header', value)\n            })\n\n        })\n    \n/script\n\n\n\n/j-dashlet-editor\n\n\n\n\n\nAdd an event listener for \nsetconfig\n event so that you can set new values for configuration.", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/dashlet-development/#dashlet-development", 
            "text": "", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/dashlet-development/#about-dashlets", 
            "text": "In JDash,  Dashlet  means a custom element which consists of Html dom elements and optional business layer.  JDash includes component based custom element development framework. This framework allows you to develop and register custom elements easily.", 
            "title": "About Dashlets"
        }, 
        {
            "location": "/client/dashlet-development/#defining-dashlets", 
            "text": "!-- Define  hello-world  element --  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n     /script  /j-dashlet   template element is used to set html dom elements. When a new instance of dashlet is created, elements inside template element is cloned and dom of new dashlet instance is created.  script  element is optional and allows you to execute Javascript for dashlet.   After defining a dashlet, you can add it to a dashboard or just use it as a custom element.  hello-world /hello-word   or add to a dashboard.  dashboard.addDashlet('hello-world');  JDash also supports placing dashlet definition inside another file.  link rel= import  href= dashlets/helloworld.html   It is also possible to seperate dashlet dom and script. Below is an example.  !-- put a template element with an id value same as id of your dashlet --  template id= hello-world \n     h1 /h1  /template  j-dashlet id= hello-world  title= Hello world!  /j-dashlet  script \n\n// Define hello-world dashlet\njdash.define('hello-world', function () {\n\n    this.initialized = function () {\n        // Dom is ready!\n        var h1 = this.querySelector('h1')\n        h1.textContent = 'Hello World!';\n    }\n\n}) /script", 
            "title": "Defining Dashlets"
        }, 
        {
            "location": "/client/dashlet-development/#dashlet-lifecycle", 
            "text": "Since JDash uses custom elements as dashlets, same rules for custom elements apply for dashlets.  Below code summarizes dashlet lifecycle.  jdash.define('hello-world', function () {\n\n    // a new instance is created.\n\n    this.initialized = function () {\n        // Dom is ready!\n    }\n\n    this.connected = function() {\n        // Attached to document\n    }\n\n    this.disconnected = function() {\n        // Detached from document\n    }\n\n})  See  W3C Custom Elements  document to get more information about custom elements.  Note: For backward compability we used ES5 style dashlet definition in this document. JDash also supports ES6 and you can use  class  keyword and inherit from  Dashlet  to define your dashlet.", 
            "title": "Dashlet Lifecycle"
        }, 
        {
            "location": "/client/dashlet-development/#configurable-dashlets", 
            "text": "", 
            "title": "Configurable Dashlets"
        }, 
        {
            "location": "/client/dashlet-development/#defining-editor-element", 
            "text": "Use  j-dashlet-editor  element to define a dashlet editor. Same rules (templates, script, lifecycle etc.) are valid for dashlet editors since they are developed with JDash component framework.  j-dashlet-editor id= hello-world-editor \n\n     template \n        Editor content goes here\n     /template \n\n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n\n        })\n     /script  /j-dashlet-editor   When a new dashlet is defined, JDash looks for an element tag that is postfixed by  -editor . For example if your dashlet is defined by  hello-world  JDash looks for  hello-world-editor . If it finds such element, it associates this tag as editor for your dashlet.  You can override this behaviour by explicitly setting a value to  j-editor  attribute.  j-dashlet id= hello-world  j-editor= my-editor  title= Hello world! /j-dashlet  j-dashlet-editor id= my-editor /j-dashlet-editor", 
            "title": "Defining Editor Element"
        }, 
        {
            "location": "/client/dashlet-development/#loading-configuration", 
            "text": "You can set and retrieve configuration values for dashlets. Configuration values are automatically converted to Json and stored on JDash Cloud or on your backend.  j-dashlet id= hello-world  title= Hello world! \n     template \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.loadConfig = function () {\n                var h1 = this.querySelector('h1')\n                h1.textContent = this.config.get('header') || 'Hello World!';\n            }\n\n            this.initialized = function () {\n                // Dom is ready!\n            }\n        })\n     /script  /j-dashlet   If you attach a function named  loadConfig  to your dashlet, JDash automatically calls it when a new instance of your dashlet is created or after successfully saving new configuration values.  j-dashlet-editor id= hello-world-editor \n\n     template \n         h3 Set a header value: /h3 \n         input type= text \n     /template \n\n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                var inputEl = this.querySelector('input');\n                inputEl.value = this.dashlet.config.get('header') || '';\n            }\n\n            this.addEventListener('setconfig', function (event) {\n                var inputEl = this.querySelector('input'), value = inputEl.value;\n                if (!value) {\n                    alert('Set a valid value please!');\n                    event.preventDefault();\n                } else this.dashlet.config.set('header', value)\n            })\n\n        })\n     /script  /j-dashlet-editor   Add an event listener for  setconfig  event so that you can set new values for configuration.", 
            "title": "Loading Configuration"
        }, 
        {
            "location": "/backend/", 
            "text": "Backend Development\n\n\nNodeJS\n\n\nTo use JDash on your own servers with your NodeJs application, see \nNodeJs Development\n.\n\n\nNet Core\n\n\nTo use JDash on your own servers with your .Net Core application, see \n.NetCore Development\n.\n\n\nIntegrating JDash Cloud\n\n\nTo get more information about JDash Cloud and authentication, see \nJDash Cloud\n.", 
            "title": "Backend Home"
        }, 
        {
            "location": "/backend/#backend-development", 
            "text": "", 
            "title": "Backend Development"
        }, 
        {
            "location": "/backend/#nodejs", 
            "text": "To use JDash on your own servers with your NodeJs application, see  NodeJs Development .", 
            "title": "NodeJS"
        }, 
        {
            "location": "/backend/#net-core", 
            "text": "To use JDash on your own servers with your .Net Core application, see  .NetCore Development .", 
            "title": "Net Core"
        }, 
        {
            "location": "/backend/#integrating-jdash-cloud", 
            "text": "To get more information about JDash Cloud and authentication, see  JDash Cloud .", 
            "title": "Integrating JDash Cloud"
        }, 
        {
            "location": "/backend/nodejs-dev/", 
            "text": "NodeJS Development\n\n\nThis article is about installing and using JDash NodeJs packages on your backend. \n\n\nIf you want to use JDash Cloud to store and manage dashboard related data you can continue from \nGetting Started\n section.\n\n\nStep 1: Initial setup\n\n\nUse npm to install JDash NodeJs packages.\n\n\nnpm install jdash-express --save\n\n\n\n\nNote: If this is the first time you use npm to add a package, first execute \nnpm init\n to create a \npackage.json\n.\n\n\nJdash uses \nExpress\n. Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.\n\n\nBasic server application\n\n\nBelow code snippet creates a simple NodeJs application, which serves static files from root folder.\n\n\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\n// Create an app\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(__dirname));\n\n\n// Start listening port 3001\napp.listen(3001, function () {\n\n})\n\n\n\n\nStep 2: Attaching jdash-express middleware to your application\n\n\nvar jexpress = require('jdash-express').default;\n\n// create a router for jdash\nvar jdashRoutes = express.Router();\n\n// jexpress acts as a middleware for specified route.\n// configure jexpress with router and user callback\njexpress({\n    principal: function (request) {\n        return {\n            user: \ncurrent-user\n, // username which makes this request\n            appid: \nmyapp\n // application id of this app\n        }\n    },\n    provider: null // we will explain provider details later.\n}).use(jdashRoutes);\n\n// Use this router\napp.use('/jdash/api/v1', jdashRoutes);\n\napp.listen(3001, function () {\n\n})\n\n\n\n\nSetting a principal and application name\n\n\nUse \nprincipal\n property of \njexpress\n configuration object to get user from current request. This value is used to set the user name property of dashboards and dashlets inside database, so that each user can have their own dashboards and dashlets.\n\n\nYou also need to provide an application name. Application name allows to use same database instance for different applications. \n\n\nUsing providers\n\n\nProviders are NodeJs packages which allows to retrieve and persist dashboard data i.e. dashlet configurations, layouts and so on.\n\n\nCurrently JDash has two built-in NodeJs packages for MongoDB and MySQL.\n\n\nUsing MongoDB with Jdash\n\n\nUse npm to install JDash MongoDb for NodeJs package.\n\n\nnpm install jdash-mongodb --save\n\n\n\n\nvar mongoose = require('mongoose');\nvar jmongo = require('jdash-mongodb').default;\n\nvar connStr = 'Your connection string goes here';\n\n// Create a database connection\nvar connection = mongoose.createConnection(connStr);\n\n// Configure Jdash when database connection is ready.\nconnection.on('connected', function () {\n    jexpress({\n        principal: function (request) {\n            return {\n                user: \ncurrent-user\n, \n                appid: \nmyapp\n \n            }\n        },\n        // Set provider\n        provider: jmongo({\n            connection: connection\n        })\n    }).use(jdashRoutes);\n})\n\n\n\n\nUsing MySQL with Jdash\n\n\nUse npm to install JDash MySQL Provider.\n\n\nnpm install jdash-mysqldb --save\n\n\n\n\nvar mysql = require('mysql');\nvar jmysql = require('jdash-mysqldb').default;\n\n// Create a database connection\nvar connection = mysql.createPool({\n    connectionLimit: 100,\n    host: 'localhost',\n    port: 3306,\n    user: 'root',\n    password: '1234',\n    database: 'jdash_local'\n});\n\njexpress({\n        principal: function (request) {\n            return {\n                user: \ncurrent-user\n, \n                appid: \nmyapp\n \n            }\n        },\n        provider: jmysql({\n            connection: connection\n        })\n}).use(jdashRoutes);\n\n\n\n\nStep 3: Client side development\n\n\nUse npm to install JDash UI package.\n\n\nnpm install jdash-ui --save\n\n\n\n\nThis will create \nnode_modules/jdash-ui\n folder.\n\n\nCreate index.html inside your project root and paste below code.\n\n\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta name=\nviewport\n content=\ninitial-scale=1, maximum-scale=1, user-scalable=no\n /\n\n    \ntitle\nJDash Tutorial\n/title\n\n\n    \n!-- jdash client library --\n\n    \nscript src=\nnode_modules/jdash-ui/dist/jdash.min.js\n/script\n\n\n    \n!-- jdash theme \n elements --\n\n    \nlink rel=\nimport\n href=\nnode_modules/jdash-ui/dist/components/jdash.html\n\n\n/head\n\n\n\nbody class=\nj-light-gray j-padding\n\n\n\n/body\n\n\n\n/html\n\n\n\n\n\nStep 4: Develop your first dashlet\n\n\nYou use \nj-dashlet\n element to define a dashlet. \n\n\nContent of \nj-dashlet\n can include \ntemplate\n element which can be used to define dom (innerHTML) of your dashlet. An optional \nscript\n element inside \nj-dashlet\n can be used to execute javascript for this dashlet. \n\n\nCopy the following code inside body tag. \n\n\n!-- Define \nhello-world\n dashlet --\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nStep 5: Create and display dashboard\n\n\nUse \nj-dashboard\n element to display a dashboard. \n\n\nInside \nbody\n tag add following code.\n\n\n    \nbutton id=\ncreateDashboardBtn\nCreate Dashboard\n/button\n\n    \nbutton id=\naddDashletBtn\nAdd Dashlet\n/button\n\n    \ndiv id=\ndashboardList\n/div\n\n\n    \nj-dashboard id=\ndashboard\n j-view-mode=\ndashletedit\n\n        \nh2 j-bind=\ntitle\n/h2\n\n    \n/j-dashboard\n\n\n/body\n\n\n\n\n\nAdd a \nscript\n element after \nbody\n and paste below code.\n\n\nscript\n\n    jdash.ready(function () {\n\n        // Set provider\n        jdash.Provider = new jdash.ProviderTypes.OnPremise({ url: '/jdash/api/v1' }); // define your end point\n\n        // createDashboardList();\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n                //createDashboardList();\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    })\n\n/script\n\n\n/body\n\n\n\n\n\nStep 6: View dashboards\n\n\nAs the last step, we will implement the code to view existing dashboards.\n\n\njdash.Provider.getMyDashboards\n method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for \nuserToken\n param for \njdash.Provider.init\n method.\n\n\nAdd following function inside \nscript\n element.\n\n\nfunction createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i \n result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}\n\n\n\n\nUncomment this function when page loads / user creates a new dashboard so that dashboard list is updated.\n\n\nStep 7: Download source code\n\n\nSource code of this guide can be found at this \nGitHub Repo\n.\n\n\nIf you enjoy JDash you can continue from Basic Concepts.", 
            "title": "NodeJS Development"
        }, 
        {
            "location": "/backend/nodejs-dev/#nodejs-development", 
            "text": "This article is about installing and using JDash NodeJs packages on your backend.   If you want to use JDash Cloud to store and manage dashboard related data you can continue from  Getting Started  section.", 
            "title": "NodeJS Development"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-1-initial-setup", 
            "text": "Use npm to install JDash NodeJs packages.  npm install jdash-express --save  Note: If this is the first time you use npm to add a package, first execute  npm init  to create a  package.json .  Jdash uses  Express . Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.", 
            "title": "Step 1: Initial setup"
        }, 
        {
            "location": "/backend/nodejs-dev/#basic-server-application", 
            "text": "Below code snippet creates a simple NodeJs application, which serves static files from root folder.  var express = require('express');\nvar bodyParser = require('body-parser');\n\n// Create an app\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(__dirname));\n\n\n// Start listening port 3001\napp.listen(3001, function () {\n\n})", 
            "title": "Basic server application"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-2-attaching-jdash-express-middleware-to-your-application", 
            "text": "var jexpress = require('jdash-express').default;\n\n// create a router for jdash\nvar jdashRoutes = express.Router();\n\n// jexpress acts as a middleware for specified route.\n// configure jexpress with router and user callback\njexpress({\n    principal: function (request) {\n        return {\n            user:  current-user , // username which makes this request\n            appid:  myapp  // application id of this app\n        }\n    },\n    provider: null // we will explain provider details later.\n}).use(jdashRoutes);\n\n// Use this router\napp.use('/jdash/api/v1', jdashRoutes);\n\napp.listen(3001, function () {\n\n})", 
            "title": "Step 2: Attaching jdash-express middleware to your application"
        }, 
        {
            "location": "/backend/nodejs-dev/#setting-a-principal-and-application-name", 
            "text": "Use  principal  property of  jexpress  configuration object to get user from current request. This value is used to set the user name property of dashboards and dashlets inside database, so that each user can have their own dashboards and dashlets.  You also need to provide an application name. Application name allows to use same database instance for different applications.", 
            "title": "Setting a principal and application name"
        }, 
        {
            "location": "/backend/nodejs-dev/#using-providers", 
            "text": "Providers are NodeJs packages which allows to retrieve and persist dashboard data i.e. dashlet configurations, layouts and so on.  Currently JDash has two built-in NodeJs packages for MongoDB and MySQL.", 
            "title": "Using providers"
        }, 
        {
            "location": "/backend/nodejs-dev/#using-mongodb-with-jdash", 
            "text": "Use npm to install JDash MongoDb for NodeJs package.  npm install jdash-mongodb --save  var mongoose = require('mongoose');\nvar jmongo = require('jdash-mongodb').default;\n\nvar connStr = 'Your connection string goes here';\n\n// Create a database connection\nvar connection = mongoose.createConnection(connStr);\n\n// Configure Jdash when database connection is ready.\nconnection.on('connected', function () {\n    jexpress({\n        principal: function (request) {\n            return {\n                user:  current-user , \n                appid:  myapp  \n            }\n        },\n        // Set provider\n        provider: jmongo({\n            connection: connection\n        })\n    }).use(jdashRoutes);\n})", 
            "title": "Using MongoDB with Jdash"
        }, 
        {
            "location": "/backend/nodejs-dev/#using-mysql-with-jdash", 
            "text": "Use npm to install JDash MySQL Provider.  npm install jdash-mysqldb --save  var mysql = require('mysql');\nvar jmysql = require('jdash-mysqldb').default;\n\n// Create a database connection\nvar connection = mysql.createPool({\n    connectionLimit: 100,\n    host: 'localhost',\n    port: 3306,\n    user: 'root',\n    password: '1234',\n    database: 'jdash_local'\n});\n\njexpress({\n        principal: function (request) {\n            return {\n                user:  current-user , \n                appid:  myapp  \n            }\n        },\n        provider: jmysql({\n            connection: connection\n        })\n}).use(jdashRoutes);", 
            "title": "Using MySQL with Jdash"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-3-client-side-development", 
            "text": "Use npm to install JDash UI package.  npm install jdash-ui --save  This will create  node_modules/jdash-ui  folder.  Create index.html inside your project root and paste below code.  !DOCTYPE html  html lang= en  head \n     meta charset= utf-8 \n     meta name= viewport  content= initial-scale=1, maximum-scale=1, user-scalable=no  / \n     title JDash Tutorial /title \n\n     !-- jdash client library -- \n     script src= node_modules/jdash-ui/dist/jdash.min.js /script \n\n     !-- jdash theme   elements -- \n     link rel= import  href= node_modules/jdash-ui/dist/components/jdash.html  /head  body class= j-light-gray j-padding  /body  /html", 
            "title": "Step 3: Client side development"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-4-develop-your-first-dashlet", 
            "text": "You use  j-dashlet  element to define a dashlet.   Content of  j-dashlet  can include  template  element which can be used to define dom (innerHTML) of your dashlet. An optional  script  element inside  j-dashlet  can be used to execute javascript for this dashlet.   Copy the following code inside body tag.   !-- Define  hello-world  dashlet --  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n     /script  /j-dashlet", 
            "title": "Step 4: Develop your first dashlet"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-5-create-and-display-dashboard", 
            "text": "Use  j-dashboard  element to display a dashboard.   Inside  body  tag add following code.       button id= createDashboardBtn Create Dashboard /button \n     button id= addDashletBtn Add Dashlet /button \n     div id= dashboardList /div \n\n     j-dashboard id= dashboard  j-view-mode= dashletedit \n         h2 j-bind= title /h2 \n     /j-dashboard  /body   Add a  script  element after  body  and paste below code.  script \n    jdash.ready(function () {\n\n        // Set provider\n        jdash.Provider = new jdash.ProviderTypes.OnPremise({ url: '/jdash/api/v1' }); // define your end point\n\n        // createDashboardList();\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n                //createDashboardList();\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    }) /script  /body", 
            "title": "Step 5: Create and display dashboard"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-6-view-dashboards", 
            "text": "As the last step, we will implement the code to view existing dashboards.  jdash.Provider.getMyDashboards  method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for  userToken  param for  jdash.Provider.init  method.  Add following function inside  script  element.  function createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i   result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}  Uncomment this function when page loads / user creates a new dashboard so that dashboard list is updated.", 
            "title": "Step 6: View dashboards"
        }, 
        {
            "location": "/backend/nodejs-dev/#step-7-download-source-code", 
            "text": "Source code of this guide can be found at this  GitHub Repo .  If you enjoy JDash you can continue from Basic Concepts.", 
            "title": "Step 7: Download source code"
        }, 
        {
            "location": "/backend/net-core-dev/", 
            "text": ".Net Core Development\n\n\nThis article is about installing and using JDash .NetCore libraries on your backend. \n\n\nIf you want to use JDash Cloud to store and manage dashboard related data you can continue from \nGetting Started\n section.\n\n\nPrerequisites\n\n\nBefore proceeding with this tutorial ensure you have installed .Net Core SDK on your development machine. For more information see\n\nMicrosoft's .NET Core Installation Page.\n\n\nStep 1 : Add JDash.NetCore references\n\n\nIf you are using Visual Studio\n\n\nUse File | New Project | Asp.Net Core Web Application menu to create an empty project.\n\n\nUse NuGet Package Manager Console window to add JDash .NetCore library references to your project.  \n\n\nInstall-Package JDash.NetCore.Api\nInstall-Package JDash.NetCore.Provider.MsSQL\nInstall-Package JDash.NetCore.Provider.MySQL\nInstall-Package Microsoft.AspNetCore.StaticFiles\n\n\n\n\nIf you are using code editors\n\n\nIf you are using Vs Code or similar code editors, you can use \ndotnet\n command to create a basic web application structure.\n\n\ndotnet new web\n\n\n\n\nThis will create an application with the default configuration.\n\n\nOpen \n.csproj\n file and add JDash references.\n\n\nItemGroup\n\n    \nPackageReference Include=\nMicrosoft.AspNetCore\n Version=\n1.1.2\n /\n\n\n    \n!-- Add below references --\n\n    \nPackageReference Include=\nJDash.NetCore.Api\n Version=\n*\n /\n\n    \nPackageReference Include=\nJDash.NetCore.Provider.MsSQL\n Version=\n*\n /\n\n    \nPackageReference Include=\nJDash.NetCore.Provider.MySQL\n Version=\n*\n /\n\n\n    \n!-- We also need this assembly to serve static files for this tutorial --\n    \n    \nPackageReference Include=\nMicrosoft.AspNetCore.StaticFiles\n Version=\n1.1.2\n /\n\n\n\n/ItemGroup\n\n\n\n\n\nStep 2: Implement configuration class\n\n\nJDash .NetCore uses a configuration class, in order to configure authentication and provider settings. \n\n\nBelow is a sample configuration class.\n\n\n\npublic class JDashConfig: BaseJDashConfigurator {\n\n    public JDashConfigurator(HttpContext context) : base(context)\n    {\n    }\n\n    // Use this method to get current user for current request.\n    public override JDashPrincipal GetPrincipal()\n    {            \n        return new JDashPrincipal(\ncurrent-user\n);\n    }\n\n    // Jdash NetCore library calls this method \n    // to get a provider instance.\n    public override IJDashProvider GetProvider()\n    {\n         // Ensure you have a valid database.\n\n        string connectionString = \nYour SQL Server connection string\n;\n        return new JSQLProvider(connectionString);\n\n        // if you are using MySql uncomment below lines.\n        // string mySqlConnStr = \nServer=127.0.01;Database=jdash;Uid=root;Pwd=1;\n;\n        // return new JDash.NetCore.Provider.MySQL.JMySQLProvider(mySqlConnStr);\n    }\n}\n\n\n\n\n\nStep 3: Registering Jdash Api end points\n\n\nOpen \nStartup.cs\n and paste below namespaces first. This will add extension methods.\n\n\nusing JDash.NetCore.Api; \nusing JDash.NetCore.Models;\n\n\n\n\nLocate \nConfigure\n method of your \nStartup\n class and replace it as below.\n\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole();\n\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    // use index.html as default.\n    app.UseDefaultFiles(); \n\n    // serve static content.\n    app.UseStaticFiles(); \n\n    // register Jdash routes.\n    app.UseJDash\nJDashConfig\n(); \n}\n\n\n\n\n\nAlso call \nAddMvc\n extension method inside ConfigureServices.\n\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n} \n\n\n\n\nStep 4: Restoring packages and test run\n\n\nUse \ndotnet restore\n command to restore project references. After succesfully restoring references, use \ndotnet run\n to run your project. \n\n\ndotnet restore\ndotnet run\n\n\n\n\nNow you should see an output as below.\n\n\nHosting environment: Production\nContent root path: /Users/aibrite/project/jdash/jdash-netcore-tutorial\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n\n\n\n\nStep 5: Client side development\n\n\nUse \nnpm\n to install JDash User Interface package. Ensure you are inside \nwwwroot\n folder.\n\n\ncd wwwroot\nnpm install jdash-ui --save\n\n\n\n\nNote: If this is the first time you use npm to add a package, first execute \nnpm init\n to create \npackage.json\n file.\n\n\nThis will create \nwwwroot/node_modules/jdash-ui\n folder.\n\n\nCreate index.html inside wwwroot folder and paste below code.\n\n\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta name=\nviewport\n content=\ninitial-scale=1, maximum-scale=1, user-scalable=no\n /\n\n    \ntitle\nJDash Tutorial\n/title\n\n\n    \n!-- jdash client library --\n\n    \nscript src=\nnode_modules/jdash-ui/dist/jdash.min.js\n/script\n\n\n    \n!-- jdash theme \n elements --\n\n    \nlink rel=\nimport\n href=\nnode_modules/jdash-ui/dist/components/jdash.html\n\n\n/head\n\n\n\nbody class=\nj-light-gray j-padding\n\n\n\n/body\n\n\n\n/html\n\n\n\n\n\nStep 6: Develop your first dashlet\n\n\nYou use \nj-dashlet\n element to define a dashlet. \n\n\nContent of \nj-dashlet\n can include \ntemplate\n element which can be used to define dom (innerHTML) of your dashlet. An optional \nscript\n element inside \nj-dashlet\n can be used to execute Javascript for this dashlet. \n\n\nCopy the following code inside body tag. \n\n\n!-- Define \nhello-world\n dashlet --\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nStep 7: Create and display dashboard\n\n\nUse \nj-dashboard\n element to display a dashboard. \n\n\nInside \nbody\n tag add following code.\n\n\n    \nbutton id=\ncreateDashboardBtn\nCreate Dashboard\n/button\n\n    \nbutton id=\naddDashletBtn\nAdd Dashlet\n/button\n\n    \ndiv id=\ndashboardList\n/div\n\n\n    \nj-dashboard id=\ndashboard\n j-view-mode=\ndashletedit\n\n        \nh2 j-bind=\ntitle\n/h2\n\n    \n/j-dashboard\n\n\n/body\n\n\n\n\n\nAdd a \nscript\n element after \nbody\n and paste below code.\n\n\nscript\n\n    jdash.ready(function () {\n\n        // Set provider\n        jdash.Provider = new jdash.ProviderTypes.OnPremise({ url: '/jdash/api/v1' }); // define your end point\n\n        // createDashboardList();\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n                //createDashboardList();\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    })\n\n/script\n\n\n/body\n\n\n\n\n\nStep 8: View dashboards\n\n\nAs the last step, we will implement the code to view existing dashboards.\n\n\njdash.Provider.getMyDashboards\n method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for \nuserToken\n param for \njdash.Provider.init\n method.\n\n\nAdd following function inside \nscript\n element.\n\n\nfunction createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i \n result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}\n\n\n\n\nUncomment this function when page loads / user creates a new dashboard so that dashboard list is updated.\n\n\nStep 9: Run your application\n\n\nNow go to your \nhttp://localhost:5000\n and enjoy JDash. \n\n\nStep 10: Download source code\n\n\nSource code of this guide can be found at this \nGitHub Repo\n.", 
            "title": "Net Core Development"
        }, 
        {
            "location": "/backend/net-core-dev/#net-core-development", 
            "text": "This article is about installing and using JDash .NetCore libraries on your backend.   If you want to use JDash Cloud to store and manage dashboard related data you can continue from  Getting Started  section.", 
            "title": ".Net Core Development"
        }, 
        {
            "location": "/backend/net-core-dev/#prerequisites", 
            "text": "Before proceeding with this tutorial ensure you have installed .Net Core SDK on your development machine. For more information see Microsoft's .NET Core Installation Page.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/backend/net-core-dev/#step-1-add-jdashnetcore-references", 
            "text": "", 
            "title": "Step 1 : Add JDash.NetCore references"
        }, 
        {
            "location": "/backend/net-core-dev/#if-you-are-using-visual-studio", 
            "text": "Use File | New Project | Asp.Net Core Web Application menu to create an empty project.  Use NuGet Package Manager Console window to add JDash .NetCore library references to your project.    Install-Package JDash.NetCore.Api\nInstall-Package JDash.NetCore.Provider.MsSQL\nInstall-Package JDash.NetCore.Provider.MySQL\nInstall-Package Microsoft.AspNetCore.StaticFiles", 
            "title": "If you are using Visual Studio"
        }, 
        {
            "location": "/backend/net-core-dev/#if-you-are-using-code-editors", 
            "text": "If you are using Vs Code or similar code editors, you can use  dotnet  command to create a basic web application structure.  dotnet new web  This will create an application with the default configuration.  Open  .csproj  file and add JDash references.  ItemGroup \n     PackageReference Include= Microsoft.AspNetCore  Version= 1.1.2  / \n\n     !-- Add below references -- \n     PackageReference Include= JDash.NetCore.Api  Version= *  / \n     PackageReference Include= JDash.NetCore.Provider.MsSQL  Version= *  / \n     PackageReference Include= JDash.NetCore.Provider.MySQL  Version= *  / \n\n     !-- We also need this assembly to serve static files for this tutorial --     \n     PackageReference Include= Microsoft.AspNetCore.StaticFiles  Version= 1.1.2  /  /ItemGroup", 
            "title": "If you are using code editors"
        }, 
        {
            "location": "/backend/net-core-dev/#step-2-implement-configuration-class", 
            "text": "JDash .NetCore uses a configuration class, in order to configure authentication and provider settings.   Below is a sample configuration class.  \npublic class JDashConfig: BaseJDashConfigurator {\n\n    public JDashConfigurator(HttpContext context) : base(context)\n    {\n    }\n\n    // Use this method to get current user for current request.\n    public override JDashPrincipal GetPrincipal()\n    {            \n        return new JDashPrincipal( current-user );\n    }\n\n    // Jdash NetCore library calls this method \n    // to get a provider instance.\n    public override IJDashProvider GetProvider()\n    {\n         // Ensure you have a valid database.\n\n        string connectionString =  Your SQL Server connection string ;\n        return new JSQLProvider(connectionString);\n\n        // if you are using MySql uncomment below lines.\n        // string mySqlConnStr =  Server=127.0.01;Database=jdash;Uid=root;Pwd=1; ;\n        // return new JDash.NetCore.Provider.MySQL.JMySQLProvider(mySqlConnStr);\n    }\n}", 
            "title": "Step 2: Implement configuration class"
        }, 
        {
            "location": "/backend/net-core-dev/#step-3-registering-jdash-api-end-points", 
            "text": "Open  Startup.cs  and paste below namespaces first. This will add extension methods.  using JDash.NetCore.Api; \nusing JDash.NetCore.Models;  Locate  Configure  method of your  Startup  class and replace it as below.  public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole();\n\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    // use index.html as default.\n    app.UseDefaultFiles(); \n\n    // serve static content.\n    app.UseStaticFiles(); \n\n    // register Jdash routes.\n    app.UseJDash JDashConfig (); \n}  Also call  AddMvc  extension method inside ConfigureServices.  public void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n}", 
            "title": "Step 3: Registering Jdash Api end points"
        }, 
        {
            "location": "/backend/net-core-dev/#step-4-restoring-packages-and-test-run", 
            "text": "Use  dotnet restore  command to restore project references. After succesfully restoring references, use  dotnet run  to run your project.   dotnet restore\ndotnet run  Now you should see an output as below.  Hosting environment: Production\nContent root path: /Users/aibrite/project/jdash/jdash-netcore-tutorial\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.", 
            "title": "Step 4: Restoring packages and test run"
        }, 
        {
            "location": "/backend/net-core-dev/#step-5-client-side-development", 
            "text": "Use  npm  to install JDash User Interface package. Ensure you are inside  wwwroot  folder.  cd wwwroot\nnpm install jdash-ui --save  Note: If this is the first time you use npm to add a package, first execute  npm init  to create  package.json  file.  This will create  wwwroot/node_modules/jdash-ui  folder.  Create index.html inside wwwroot folder and paste below code.  !DOCTYPE html  html lang= en  head \n     meta charset= utf-8 \n     meta name= viewport  content= initial-scale=1, maximum-scale=1, user-scalable=no  / \n     title JDash Tutorial /title \n\n     !-- jdash client library -- \n     script src= node_modules/jdash-ui/dist/jdash.min.js /script \n\n     !-- jdash theme   elements -- \n     link rel= import  href= node_modules/jdash-ui/dist/components/jdash.html  /head  body class= j-light-gray j-padding  /body  /html", 
            "title": "Step 5: Client side development"
        }, 
        {
            "location": "/backend/net-core-dev/#step-6-develop-your-first-dashlet", 
            "text": "You use  j-dashlet  element to define a dashlet.   Content of  j-dashlet  can include  template  element which can be used to define dom (innerHTML) of your dashlet. An optional  script  element inside  j-dashlet  can be used to execute Javascript for this dashlet.   Copy the following code inside body tag.   !-- Define  hello-world  dashlet --  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n     /script  /j-dashlet", 
            "title": "Step 6: Develop your first dashlet"
        }, 
        {
            "location": "/backend/net-core-dev/#step-7-create-and-display-dashboard", 
            "text": "Use  j-dashboard  element to display a dashboard.   Inside  body  tag add following code.       button id= createDashboardBtn Create Dashboard /button \n     button id= addDashletBtn Add Dashlet /button \n     div id= dashboardList /div \n\n     j-dashboard id= dashboard  j-view-mode= dashletedit \n         h2 j-bind= title /h2 \n     /j-dashboard  /body   Add a  script  element after  body  and paste below code.  script \n    jdash.ready(function () {\n\n        // Set provider\n        jdash.Provider = new jdash.ProviderTypes.OnPremise({ url: '/jdash/api/v1' }); // define your end point\n\n        // createDashboardList();\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n                //createDashboardList();\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    }) /script  /body", 
            "title": "Step 7: Create and display dashboard"
        }, 
        {
            "location": "/backend/net-core-dev/#step-8-view-dashboards", 
            "text": "As the last step, we will implement the code to view existing dashboards.  jdash.Provider.getMyDashboards  method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for  userToken  param for  jdash.Provider.init  method.  Add following function inside  script  element.  function createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i   result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}  Uncomment this function when page loads / user creates a new dashboard so that dashboard list is updated.", 
            "title": "Step 8: View dashboards"
        }, 
        {
            "location": "/backend/net-core-dev/#step-9-run-your-application", 
            "text": "Now go to your  http://localhost:5000  and enjoy JDash.", 
            "title": "Step 9: Run your application"
        }, 
        {
            "location": "/backend/net-core-dev/#step-10-download-source-code", 
            "text": "Source code of this guide can be found at this  GitHub Repo .", 
            "title": "Step 10: Download source code"
        }, 
        {
            "location": "/backend/jdash-cloud/", 
            "text": "JDash Cloud\n\n\nWhat is JDash Cloud?\n\n\nJDash Cloud is an api service, which safely keeps dashboard and dashlet data of your users. This allows you, as a developer, to focus on dashlet development and user experience instead of backend configuration and security.\n\n\nHow Can I Use JDash Cloud Services?\n\n\nIn order to use JDash Cloud, \nregister as a new user\n. After registration, you will automatically be assigned an Api Key and Secret for your first application.\n\n\nApi Key\n uniquely identifies your application. The \nsecret\n value is used to encrypt data between your application and JDash Cloud.\n\n\nPlease remember that you can always access the Api Key and the Secret of your selected application(s), at the Settings Pane of your User Panel at \njdash.io \n.\n\n\nIntegrating JDash Cloud into Your Application\n\n\nJDash uses JSON Web Token (JWT) standard for authentication of your application and associated users. \n\n\nJSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties. For more information about JSON Web Token, visit \nhttps://jwt.io\n.\n\n\nIntegrating is pretty easy and requires only sending \napi key\n and \nuser\n values, that are encrypted by the \n`secret\n. \n\n\nA sample JWT Payload should look like:\n\n\n{\n    data: {\n        user: \nUSERNAME OR USERID of your end user\n\n    },\n    sub: \nAPI KEY of your application\n\n}\n\n\n\n\nAs a general design pattern,\n\n\nOn server side:\n\n\n\n\nSet up an end point for retrieving JWT token on your application, i.e. \n/auth/jwt\n.\n\n\nGet the authenticated user of this request using your current authentication mechanism (i.e. cookie).\n\n\nCreate a JWT payload and sign this payload with your application's \nsecret\n value, which you received from JDash Cloud.\n\n\nSend the response to the client side.\n\n\n\n\nOn client side:\n\n\n\n\nMake a request to your JWT end point (i.e. \n/auth/jwt\n).\n\n\nUse JDash Provider callback with the data you got from your athentication end point.\n\n\n\n\nNodeJs Implementation\n\n\nStep 1: Install JSON Web Token package via npm\n\n\nJWT.IO allows you to decode, verify and generate JWT.\n\n\nnpm install JSONwebtoken --save\n\n\n\n\nStep 2: Implement JWT end point\n\n\nBelow NodeJS code demonstrates a sample implementation.\n\n\napp.get('/auth/jwt', function (req, res, next) {\n    // Get end user from request based on your \n    // application's authentication mechanism\n    var enduser = req.user;\n    var jwt = require('JSONwebtoken');\n    jwt.sign({\n        data: {\n            user: enduser /* current user of request */\n        }\n        //}, 'TODO: REPLACE WITH SECRET', {\n    }, 'a9f26c2daeb4e0af693eab1c59d5e9b0', {\n            algorithm: 'HS256',\n            subject: 'TODO: REPLACE WITH APIKEY',\n            subject: '4f20f93e-5004-4daf-a629-76af8f4f9b95',\n            expiresIn: \n2h\n /* optional but recommended */\n        }, (err, token) =\n {\n            if (err) {\n                next(new Error(err))\n            } else {\n                res.send(token);\n            }\n        });\n});\n\n\n\n\nStep 3: Use end point on client side\n\n\nInside \njdash.ready\n handler, make a call to the above end point to get a secure JWT Token for your end user.\n\n\nNote that \njdash.ready\n is called once all the requirements of the JDash Service are met, such that the scripts are loaded and dom is ready.\n\n\njdash.ready(function () {\n        jdash.Provider.init({\n            apiKey: 'API KEY',           \n            userToken: function (tokenCallback) {\n                // make a XMLHttpRequest (aka Ajax call) to your end point\n                // you can use any ajax library ie $.ajax, we are just using axios\n                // response must be a jwt string.\n                jdash.Http.get('auth/jwt').then(function (result) {\n                    // securely set end user\n                    tokenCallback(null, result.data);\n                }, function (err) {\n                    tokenCallback(err);\n                });\n            }\n        })\n}\n\n\n\n\nKeep in mind that JDash Cloud User Panel also allows you to create a Test User Token.\n\n\nStep 4: Download source code\n\n\nSource code of this guide can be found at this \nGitHub Repo\n.\n\n\n.Net Core implementation\n\n\nYou can use \nJwt.Net\n NuGet package \n here \n or you can find source code on git \n here\n.  Or you can chose any .Net Libraries listed on \nhttps://jwt.io/#libraries-io\n \n\n\nWe will show you how to implement JWT for Jose-JWT Nuget Package.\n\n\nFirst install Jose-JWT \n\n\n Install-Package jose-jwt\n\n\n\n\n       using Jose;\n\n\n       static void Main(string[] args)\n        {\n          var token = CreateToken();\n          // you can use this token for any client authorization request.\n        }\n\n        static string CreateToken()\n        { \n            DateTime issued = DateTime.Now;\n            DateTime expire = DateTime.Now.AddHours(10);\n\n            var payload = new Dictionary\nstring, object\n()\n            {\n                { \ndata\n , new { user = \nCURRENT USER NAME/ID\n } }\n                {\nsub\n, \nYOUR API KEY\n},\n                {\niat\n, ToUnixTime(issued).ToString()},\n                {\nexp\n, ToUnixTime(expire).ToString()} // optional(recommended)\n            };\n\n            string token = JWT.Encode(payload, \nYOUR SECRET KEY HERE\n, JwsAlgorithm.HS256);\n            return token;\n        }\n\n        /// \nremarks\n\n        /// Take a look at http://stackoverflow.com/a/33113820\n        /// \n/remarks\n\n        static byte[] Base64UrlDecode(string arg)\n        { \n            return Convert.FromBase64String(s); // Standard base64 decoder\n        }\n\n        static long ToUnixTime(DateTime dateTime)\n        {\n            return (int)(dateTime.ToUniversalTime().Subtract(new DateTime(1970, 1, 1))).TotalSeconds;\n        }\n\n\n\n\n\nNotes:\n\n\n1- JDash will call \nuserToken\n function when it needs a new token (as initial token request or for the renewal of expired JWT).\n\n\n2- JDash JWT must be signed with a symmetric algorithm (Preferably \"HS256\" algorithm). \n\n\n3- You can use any other claims instead of \nData\n property and its values.\n\n\n4- You can use any headers / any header values such as expiration time.", 
            "title": "JDash Cloud"
        }, 
        {
            "location": "/backend/jdash-cloud/#jdash-cloud", 
            "text": "", 
            "title": "JDash Cloud"
        }, 
        {
            "location": "/backend/jdash-cloud/#what-is-jdash-cloud", 
            "text": "JDash Cloud is an api service, which safely keeps dashboard and dashlet data of your users. This allows you, as a developer, to focus on dashlet development and user experience instead of backend configuration and security.", 
            "title": "What is JDash Cloud?"
        }, 
        {
            "location": "/backend/jdash-cloud/#how-can-i-use-jdash-cloud-services", 
            "text": "In order to use JDash Cloud,  register as a new user . After registration, you will automatically be assigned an Api Key and Secret for your first application.  Api Key  uniquely identifies your application. The  secret  value is used to encrypt data between your application and JDash Cloud.  Please remember that you can always access the Api Key and the Secret of your selected application(s), at the Settings Pane of your User Panel at  jdash.io  .", 
            "title": "How Can I Use JDash Cloud Services?"
        }, 
        {
            "location": "/backend/jdash-cloud/#integrating-jdash-cloud-into-your-application", 
            "text": "JDash uses JSON Web Token (JWT) standard for authentication of your application and associated users.   JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties. For more information about JSON Web Token, visit  https://jwt.io .  Integrating is pretty easy and requires only sending  api key  and  user  values, that are encrypted by the  `secret .   A sample JWT Payload should look like:  {\n    data: {\n        user:  USERNAME OR USERID of your end user \n    },\n    sub:  API KEY of your application \n}  As a general design pattern,  On server side:   Set up an end point for retrieving JWT token on your application, i.e.  /auth/jwt .  Get the authenticated user of this request using your current authentication mechanism (i.e. cookie).  Create a JWT payload and sign this payload with your application's  secret  value, which you received from JDash Cloud.  Send the response to the client side.   On client side:   Make a request to your JWT end point (i.e.  /auth/jwt ).  Use JDash Provider callback with the data you got from your athentication end point.", 
            "title": "Integrating JDash Cloud into Your Application"
        }, 
        {
            "location": "/backend/jdash-cloud/#nodejs-implementation", 
            "text": "", 
            "title": "NodeJs Implementation"
        }, 
        {
            "location": "/backend/jdash-cloud/#step-1-install-json-web-token-package-via-npm", 
            "text": "JWT.IO allows you to decode, verify and generate JWT.  npm install JSONwebtoken --save", 
            "title": "Step 1: Install JSON Web Token package via npm"
        }, 
        {
            "location": "/backend/jdash-cloud/#step-2-implement-jwt-end-point", 
            "text": "Below NodeJS code demonstrates a sample implementation.  app.get('/auth/jwt', function (req, res, next) {\n    // Get end user from request based on your \n    // application's authentication mechanism\n    var enduser = req.user;\n    var jwt = require('JSONwebtoken');\n    jwt.sign({\n        data: {\n            user: enduser /* current user of request */\n        }\n        //}, 'TODO: REPLACE WITH SECRET', {\n    }, 'a9f26c2daeb4e0af693eab1c59d5e9b0', {\n            algorithm: 'HS256',\n            subject: 'TODO: REPLACE WITH APIKEY',\n            subject: '4f20f93e-5004-4daf-a629-76af8f4f9b95',\n            expiresIn:  2h  /* optional but recommended */\n        }, (err, token) =  {\n            if (err) {\n                next(new Error(err))\n            } else {\n                res.send(token);\n            }\n        });\n});", 
            "title": "Step 2: Implement JWT end point"
        }, 
        {
            "location": "/backend/jdash-cloud/#step-3-use-end-point-on-client-side", 
            "text": "Inside  jdash.ready  handler, make a call to the above end point to get a secure JWT Token for your end user.  Note that  jdash.ready  is called once all the requirements of the JDash Service are met, such that the scripts are loaded and dom is ready.  jdash.ready(function () {\n        jdash.Provider.init({\n            apiKey: 'API KEY',           \n            userToken: function (tokenCallback) {\n                // make a XMLHttpRequest (aka Ajax call) to your end point\n                // you can use any ajax library ie $.ajax, we are just using axios\n                // response must be a jwt string.\n                jdash.Http.get('auth/jwt').then(function (result) {\n                    // securely set end user\n                    tokenCallback(null, result.data);\n                }, function (err) {\n                    tokenCallback(err);\n                });\n            }\n        })\n}  Keep in mind that JDash Cloud User Panel also allows you to create a Test User Token.", 
            "title": "Step 3: Use end point on client side"
        }, 
        {
            "location": "/backend/jdash-cloud/#step-4-download-source-code", 
            "text": "Source code of this guide can be found at this  GitHub Repo .", 
            "title": "Step 4: Download source code"
        }, 
        {
            "location": "/backend/jdash-cloud/#net-core-implementation", 
            "text": "You can use  Jwt.Net  NuGet package   here   or you can find source code on git   here .  Or you can chose any .Net Libraries listed on  https://jwt.io/#libraries-io    We will show you how to implement JWT for Jose-JWT Nuget Package.  First install Jose-JWT    Install-Package jose-jwt  \n       using Jose;\n\n\n       static void Main(string[] args)\n        {\n          var token = CreateToken();\n          // you can use this token for any client authorization request.\n        }\n\n        static string CreateToken()\n        { \n            DateTime issued = DateTime.Now;\n            DateTime expire = DateTime.Now.AddHours(10);\n\n            var payload = new Dictionary string, object ()\n            {\n                {  data  , new { user =  CURRENT USER NAME/ID  } }\n                { sub ,  YOUR API KEY },\n                { iat , ToUnixTime(issued).ToString()},\n                { exp , ToUnixTime(expire).ToString()} // optional(recommended)\n            };\n\n            string token = JWT.Encode(payload,  YOUR SECRET KEY HERE , JwsAlgorithm.HS256);\n            return token;\n        }\n\n        ///  remarks \n        /// Take a look at http://stackoverflow.com/a/33113820\n        ///  /remarks \n        static byte[] Base64UrlDecode(string arg)\n        { \n            return Convert.FromBase64String(s); // Standard base64 decoder\n        }\n\n        static long ToUnixTime(DateTime dateTime)\n        {\n            return (int)(dateTime.ToUniversalTime().Subtract(new DateTime(1970, 1, 1))).TotalSeconds;\n        }", 
            "title": ".Net Core implementation"
        }, 
        {
            "location": "/backend/jdash-cloud/#notes", 
            "text": "1- JDash will call  userToken  function when it needs a new token (as initial token request or for the renewal of expired JWT).  2- JDash JWT must be signed with a symmetric algorithm (Preferably \"HS256\" algorithm).   3- You can use any other claims instead of  Data  property and its values.  4- You can use any headers / any header values such as expiration time.", 
            "title": "Notes:"
        }
    ]
}