{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nWelcome to Jdash documentation.\n\n\nJdash provides javascript + backend platform for adding end user designable dashboards into your web application.\n\n\nEnd users can personalize your application better with Jdash. Users can;\n\n\n\n\nCreate their own dashboards\n\n\nShare dashboards/dashlets\n\n\nConfigure dashlets\n\n\n\n\nFeatures\n\n\nClient side features\n\n\n\n\nFully customizable user interface\n\n\nEasy dashlet development\n\n\nBuiltin themes for Bootstrap \n Material\n\n\nCustom themes\n\n\n\n\nServer side features\n\n\n\n\nEither use Jdash Cloud or install on your servers\n\n\nSupport for NodeJs, Asp.Net MVC and Net Core server\n\n\nSupport for MongoDB, MySQL and Microsoft SQL Server\n\n\n\n\nClient Development\n\n\nGetting Started\n\n\nBasic stuff to start using Jdash.\n\n\nWorking with dashboards\n\n\nArticles related about using dashboards. \n\n\nDashlet development\n\n\nArticles related about developing your dashlets. \n\n\nAdvanced Topics\n\n\nAdvanced topics i.e. authentication, advanced customization etc.\n\n\nServer Development\n\n\nGetting Started\n\n\nUsing Jdash Cloud\n\n\nNodeJs development\n\n\nAsp.Net MVC development\n\n\nNet Core development", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Welcome to Jdash documentation.  Jdash provides javascript + backend platform for adding end user designable dashboards into your web application.  End users can personalize your application better with Jdash. Users can;   Create their own dashboards  Share dashboards/dashlets  Configure dashlets", 
            "title": "Welcome"
        }, 
        {
            "location": "/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/#client-side-features", 
            "text": "Fully customizable user interface  Easy dashlet development  Builtin themes for Bootstrap   Material  Custom themes", 
            "title": "Client side features"
        }, 
        {
            "location": "/#server-side-features", 
            "text": "Either use Jdash Cloud or install on your servers  Support for NodeJs, Asp.Net MVC and Net Core server  Support for MongoDB, MySQL and Microsoft SQL Server", 
            "title": "Server side features"
        }, 
        {
            "location": "/#client-development", 
            "text": "", 
            "title": "Client Development"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Basic stuff to start using Jdash.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#working-with-dashboards", 
            "text": "Articles related about using dashboards.", 
            "title": "Working with dashboards"
        }, 
        {
            "location": "/#dashlet-development", 
            "text": "Articles related about developing your dashlets.", 
            "title": "Dashlet development"
        }, 
        {
            "location": "/#advanced-topics", 
            "text": "Advanced topics i.e. authentication, advanced customization etc.", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/#server-development", 
            "text": "", 
            "title": "Server Development"
        }, 
        {
            "location": "/#getting-started_1", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#using-jdash-cloud", 
            "text": "", 
            "title": "Using Jdash Cloud"
        }, 
        {
            "location": "/#nodejs-development", 
            "text": "", 
            "title": "NodeJs development"
        }, 
        {
            "location": "/#aspnet-mvc-development", 
            "text": "", 
            "title": "Asp.Net MVC development"
        }, 
        {
            "location": "/#net-core-development", 
            "text": "", 
            "title": "Net Core development"
        }, 
        {
            "location": "/client/", 
            "text": "Client\n\n\nGetting Started", 
            "title": "Client Home"
        }, 
        {
            "location": "/client/#client", 
            "text": "", 
            "title": "Client"
        }, 
        {
            "location": "/client/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/getting-started/", 
            "text": "Getting Started\n\n\nQuick Start\n\n\nThe aim of this article is to get you up and running with Jdash in 5 minutes.\n\n\nStep 1: Install JDash Client\n\n\nUse npm to install Jdash client library.\n\n\nnpm install jdash-ui --save\n\n\n\n\nThis will create node_modules/jdash-ui folder.\n\n\nNote: If this is the first time you use npm to add a package first execute npm init to create a package.json.\n\n\nStep 2: Create a basic HTML page\n\n\nCreate index.html and paste below code inside.\n\n\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta name=\nviewport\n content=\ninitial-scale=1, maximum-scale=1, user-scalable=no\n /\n\n    \ntitle\nJDash Tutorial\n/title\n\n\n    \n!-- jdash client library --\n\n    \nscript src=\nnode_modules/jdash-ui/dist/jdash.min.js\n/script\n\n\n    \n!-- jdash theme \n elements --\n\n    \nlink rel=\nimport\n href=\nnode_modules/jdash-ui/dist/components/jdash.html\n\n\n/head\n\n\n\nbody class=\nj-light-gray j-padding\n\n\n\n/body\n\n\n\n/html\n\n\n\n\n\nStep 3: Develop your first dashlet\n\n\nYou use \nj-dashlet\n element to define a dashlet. \n\n\nContent of \nj-dashlet\n can include \ntemplate\n element which can be used to define dom (innerHTML) of your dashlet. An optional \nscript\n element inside \nj-dashlet\n can be used to execute javascript for this dashlet. That simple \n clear!\n\n\nCopy the following code inside body tag. \n\n\n!-- Define \nhello-world\n dashlet --\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nStep 4: Get a free api key\n\n\nJDash cloud can save and retrieve user data i.e. dashboards, layouts, dashlet configurations and positions.\n\n\nTo use Jdash Cloud \nregister as a new user\n. After registration you will get an api key and test user token. Use them to initialize authentication.\n\n\nTodo so, add a \nscript\n element just before \n/body\n tag.\n\n\n    \nscript\n\n        jdash.ready(function () {\n            jdash.Provider.init({\n                apiKey: 'YOUR API KEY',\n                userToken: 'USER TOKEN'\n            })\n        })\n    \n/script\n\n\n/body\n\n\n\n\n\napikey\n:  A string value which identifies your application.\n\n\nuserToken\n:  A string value or function to authenticate your end user to Jdash cloud.\n\n\nStep 5: Create and display dashboard\n\n\nYou use \nj-dashboard\n element to display a dashboard. \n\n\nInside \nbody\n tag, before \nscript\n element add following code.\n\n\nbutton id=\ncreateDashboardBtn\nCreate Dashboard\n/button\n\n\nbutton id=\naddDashletBtn\nAdd Dashlet\n/button\n\n\ndiv id=\ndashboardList\n/div\n\n\n\nj-dashboard id=\ndashboard\n j-view-mode=\ndashletedit\n\n    \nh2 j-bind=\ntitle\n/h2\n\n\n/j-dashboard\n\n\n\n\n\nWe also added some buttons to create dashboard and adding dashlets.\n\n\nNow and event handlers inside \njdash.ready\n handler.\n\n\nscript\n\n    jdash.ready(function () {\n\n        jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: 'USER TOKEN'\n        })\n\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    })\n\n/script\n\n\n/body\n\n\n\n\n\nStep 6: View dashboards\n\n\nAs last step we will implement creating buttons to view existing dashboards.\n\n\njdash.Provider.getMyDashboards\n method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for \nuserToken\n param for \njdash.Provider.init\n method.\n\n\nAdd following function inside \nscript\n element.\n\n\nfunction createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i \n result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}\n\n\n\n\nCall this function when page loads or user creates a new dashboard.\n\n\nStep 7: Download source code\n\n\nSource code of this guide can be found at this \nGitHub Repo\n.\n\n\nIf you enjoy Jdash you can continue from Basic Concepts.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/client/getting-started/#quick-start", 
            "text": "The aim of this article is to get you up and running with Jdash in 5 minutes.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/client/getting-started/#step-1-install-jdash-client", 
            "text": "Use npm to install Jdash client library.  npm install jdash-ui --save  This will create node_modules/jdash-ui folder.  Note: If this is the first time you use npm to add a package first execute npm init to create a package.json.", 
            "title": "Step 1: Install JDash Client"
        }, 
        {
            "location": "/client/getting-started/#step-2-create-a-basic-html-page", 
            "text": "Create index.html and paste below code inside.  !DOCTYPE html  html lang= en  head \n     meta charset= utf-8 \n     meta name= viewport  content= initial-scale=1, maximum-scale=1, user-scalable=no  / \n     title JDash Tutorial /title \n\n     !-- jdash client library -- \n     script src= node_modules/jdash-ui/dist/jdash.min.js /script \n\n     !-- jdash theme   elements -- \n     link rel= import  href= node_modules/jdash-ui/dist/components/jdash.html  /head  body class= j-light-gray j-padding  /body  /html", 
            "title": "Step 2: Create a basic HTML page"
        }, 
        {
            "location": "/client/getting-started/#step-3-develop-your-first-dashlet", 
            "text": "You use  j-dashlet  element to define a dashlet.   Content of  j-dashlet  can include  template  element which can be used to define dom (innerHTML) of your dashlet. An optional  script  element inside  j-dashlet  can be used to execute javascript for this dashlet. That simple   clear!  Copy the following code inside body tag.   !-- Define  hello-world  dashlet --  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         h1 /h1 \n     /template \n     script \n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n\n        })\n     /script  /j-dashlet", 
            "title": "Step 3: Develop your first dashlet"
        }, 
        {
            "location": "/client/getting-started/#step-4-get-a-free-api-key", 
            "text": "JDash cloud can save and retrieve user data i.e. dashboards, layouts, dashlet configurations and positions.  To use Jdash Cloud  register as a new user . After registration you will get an api key and test user token. Use them to initialize authentication.  Todo so, add a  script  element just before  /body  tag.       script \n        jdash.ready(function () {\n            jdash.Provider.init({\n                apiKey: 'YOUR API KEY',\n                userToken: 'USER TOKEN'\n            })\n        })\n     /script  /body   apikey\n:  A string value which identifies your application.  userToken\n:  A string value or function to authenticate your end user to Jdash cloud.", 
            "title": "Step 4: Get a free api key"
        }, 
        {
            "location": "/client/getting-started/#step-5-create-and-display-dashboard", 
            "text": "You use  j-dashboard  element to display a dashboard.   Inside  body  tag, before  script  element add following code.  button id= createDashboardBtn Create Dashboard /button  button id= addDashletBtn Add Dashlet /button  div id= dashboardList /div  j-dashboard id= dashboard  j-view-mode= dashletedit \n     h2 j-bind= title /h2  /j-dashboard   We also added some buttons to create dashboard and adding dashlets.  Now and event handlers inside  jdash.ready  handler.  script \n    jdash.ready(function () {\n\n        jdash.Provider.init({\n            apiKey: 'YOUR API KEY',\n            userToken: 'USER TOKEN'\n        })\n\n        document.querySelector('#createDashboardBtn').addEventListener('click', function () {\n            var title = window.prompt('Set a title for new dashboard');\n\n            // Create a new dashboard\n            jdash.Provider.createDashboard({\n                title: title\n            }).then(function (result) {\n                console.log('Dashboard created with id:' + result.id);\n                dashboard.load(result.id);\n            }).catch(function (err) {\n                alert('There was an error creating dashboard: ' + err.message || err)\n            })\n        })\n\n        // add hello world dashlet to dashboard\n        document.querySelector('#addDashletBtn').addEventListener('click', function (e) {\n            dashboard.addDashlet('hello-world');\n        })\n    }) /script  /body", 
            "title": "Step 5: Create and display dashboard"
        }, 
        {
            "location": "/client/getting-started/#step-6-view-dashboards", 
            "text": "As last step we will implement creating buttons to view existing dashboards.  jdash.Provider.getMyDashboards  method returns a list of dashboards current user owns. Note that you initialize current credentials by setting a valid value for  userToken  param for  jdash.Provider.init  method.  Add following function inside  script  element.  function createDashboardList() {\n    var container = document.querySelector('#dashboardList');\n\n    // clear existing buttons.\n    container.innerHTML = '';\n    return jdash.Provider.getMyDashboards().then(function (result) {\n\n        // for each dashboard create a button\n        for (var i = 0; i   result.data.length; i++) {\n            var btn = document.createElement('button');\n            btn.textContent = result.data[i].title;\n            btn.id = result.data[i].id;\n            container.appendChild(btn);\n            btn.addEventListener('click', function (e) {\n                var idToLoad = e.target.id;\n                dashboard.load(idToLoad);\n            })\n        }\n    })\n}  Call this function when page loads or user creates a new dashboard.", 
            "title": "Step 6: View dashboards"
        }, 
        {
            "location": "/client/getting-started/#step-7-download-source-code", 
            "text": "Source code of this guide can be found at this  GitHub Repo .  If you enjoy Jdash you can continue from Basic Concepts.", 
            "title": "Step 7: Download source code"
        }, 
        {
            "location": "/client/basic-concepts/", 
            "text": "Basic Concepts\n\n\nUsing Jdash you can add drag-drop end user designable dashboards to your application.\n\n\nFeatures\n\n\nLicense Models\n\n\nThere are two license models.\n\n\nJDash Cloud\n\nYou can use \nJDash Cloud\n to store dashboard \n dashlet related data. \n\n\nIf you have a cloud based application and don't want to integrate Jdash backend platform into your server application this is an ideal, cheap and fast solution to get you up.\n\n\nOn Premise\n\nIf you are a developer/company which develop applications for other customers or if you have a product which you want to embed Jdash this is the right license type for you.\n\n\nYou can integrate Jdash backend platform into your server application easily.\n\n\n\n\nIf you are using NodeJs, we support it with MongoDB and MySQL.\n\n\nIf you are using Asp.Net MVC 5+, we support it with MySQL and MSSQL.\n\n\nIf you are using Net Core, we support it with MySQL and MSSQL.\n\n\n\n\nIf you need other platforms/database servers just drop us an e-mail (hello@jdash.io).\n\n\nEasy dashlet development\n\n\nJdash uses W3C custom elements spec for dashlet development. \n\n\nOn top of this spec we developed a component framework to make dashlet development easier.\n\n\nHere is a sample dashlet.\n\n\nj-dashlet id=\nhello-world\n title=\nHello world!\n\n    \ntemplate\n\n        \n!-- This will be the HTML content of your dashlet  --\n\n        \n!-- Think template as user interface layer of your dashlet --\n\n        \nh1\n/h1\n\n    \n/template\n\n    \nscript\n\n\n        // An optional javascript function allows you implement\n        // your business logic.\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n        })\n    \n/script\n\n\n/j-dashlet\n\n\n\n\n\nAbove code snippet defines \nhello-world\n custom element which inherits from \njdash.Dashlet\n class.\n\n\nYou can also use this element directly inside yout HTML.\n\n\nhello-world\n/hello-world", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/basic-concepts/#basic-concepts", 
            "text": "Using Jdash you can add drag-drop end user designable dashboards to your application.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/client/basic-concepts/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/client/basic-concepts/#license-models", 
            "text": "There are two license models.  JDash Cloud \nYou can use  JDash Cloud  to store dashboard   dashlet related data.   If you have a cloud based application and don't want to integrate Jdash backend platform into your server application this is an ideal, cheap and fast solution to get you up.  On Premise \nIf you are a developer/company which develop applications for other customers or if you have a product which you want to embed Jdash this is the right license type for you.  You can integrate Jdash backend platform into your server application easily.   If you are using NodeJs, we support it with MongoDB and MySQL.  If you are using Asp.Net MVC 5+, we support it with MySQL and MSSQL.  If you are using Net Core, we support it with MySQL and MSSQL.   If you need other platforms/database servers just drop us an e-mail (hello@jdash.io).", 
            "title": "License Models"
        }, 
        {
            "location": "/client/basic-concepts/#easy-dashlet-development", 
            "text": "Jdash uses W3C custom elements spec for dashlet development.   On top of this spec we developed a component framework to make dashlet development easier.  Here is a sample dashlet.  j-dashlet id= hello-world  title= Hello world! \n     template \n         !-- This will be the HTML content of your dashlet  -- \n         !-- Think template as user interface layer of your dashlet -- \n         h1 /h1 \n     /template \n     script \n\n        // An optional javascript function allows you implement\n        // your business logic.\n        jdash.define(function () {\n\n            this.initialized = function () {\n                // Dom is ready!\n                var h1 = this.querySelector('h1')\n                h1.textContent = 'Hello World!';\n            }\n        })\n     /script  /j-dashlet   Above code snippet defines  hello-world  custom element which inherits from  jdash.Dashlet  class.  You can also use this element directly inside yout HTML.  hello-world /hello-world", 
            "title": "Easy dashlet development"
        }, 
        {
            "location": "/client/working-with-dashboards/", 
            "text": "Working with Dashboards", 
            "title": "Working with Dashboards"
        }, 
        {
            "location": "/client/working-with-dashboards/#working-with-dashboards", 
            "text": "", 
            "title": "Working with Dashboards"
        }, 
        {
            "location": "/client/dashlet-development/", 
            "text": "Dashlet Development", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/dashlet-development/#dashlet-development", 
            "text": "", 
            "title": "Dashlet Development"
        }, 
        {
            "location": "/client/advanced-topics/", 
            "text": "Working with Layouts", 
            "title": "Advanced Topics"
        }, 
        {
            "location": "/client/advanced-topics/#working-with-layouts", 
            "text": "", 
            "title": "Working with Layouts"
        }, 
        {
            "location": "/backend/", 
            "text": "Backend Development\n\n\nGetting Started", 
            "title": "Backend Home"
        }, 
        {
            "location": "/backend/#backend-development", 
            "text": "", 
            "title": "Backend Development"
        }, 
        {
            "location": "/backend/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/backend/jdash-cloud/", 
            "text": "", 
            "title": "JDash Cloud"
        }, 
        {
            "location": "/backend/nodejs-dev/", 
            "text": "", 
            "title": "NodeJS Development"
        }, 
        {
            "location": "/backend/aspnet-mvc-dev/", 
            "text": "", 
            "title": "Asp.Net MVC Development"
        }, 
        {
            "location": "/backend/net-core-dev/", 
            "text": "", 
            "title": "Net Core Development"
        }, 
        {
            "location": "/backend/using-mongodb/", 
            "text": "", 
            "title": "MongoDB"
        }, 
        {
            "location": "/backend/using-mysql/", 
            "text": "", 
            "title": "MySQL"
        }, 
        {
            "location": "/backend/using-mssql/", 
            "text": "", 
            "title": "MSSQL"
        }
    ]
}